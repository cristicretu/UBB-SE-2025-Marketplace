// <copyright file="WaitListRepository.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>

namespace Server.Repository
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Diagnostics;
    using Microsoft.EntityFrameworkCore;
    using Server.DataModels;
    using Server.DBConnection;
    using SharedClassLibrary.Domain;
    using SharedClassLibrary.IRepository;

    /// <summary>
    /// Provides data access functionality for managing waitlists and user waitlist entries.
    /// </summary>
    public class WaitListRepository : IWaitListRepository
    {
        // private readonly string connectionString;
        // private readonly IDatabaseProvider databaseProvider;
        private readonly MarketPlaceDbContext dbContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="WaitListRepository"/> class.
        /// </summary>
        /// <param name="dbContext">The database context.</param>
        public WaitListRepository(MarketPlaceDbContext dbContext)
        {
            this.dbContext = dbContext;
        }

        /// <summary>
        /// Adds a user to the waitlist for a specific product.
        /// OBS: Changed to productId instead of productWaitListId because in code it was used as a productId -Alex.
        /// </summary>
        /// <param name="userId">The ID of the user to be added to the waitlist.</param>
        /// <param name="productId">The ID of the product.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <exception cref="Exception">Thrown when the user or product does not exist.</exception>
        public async Task AddUserToWaitlist(int userId, int productId)
        {
            // Check if the Buyer exists
            bool buyerExists = await this.dbContext.Buyers.AnyAsync(buyer => buyer.Id == userId);
            if (!buyerExists)
            {
                throw new Exception($"AddUserToWaitlist: No Buyer with id: {userId}");
            }

            // Check if the Product exists
            bool productExists = await this.dbContext.Products.AnyAsync(product => product.ProductId == productId);
            if (!productExists)
            {
                throw new Exception($"AddUserToWaitlist: No Product with id: {productId}");
            }

            // Fetch the WaitlistProductEntity with the given productId
            WaitlistProductEntity waitlistProduct = await this.dbContext.WaitlistProducts.FirstOrDefaultAsync(waitlistProduct => waitlistProduct.ProductID == productId)
                                                        ?? throw new Exception($"AddUserToWaitlist: No ProductWaitList with id: {productId}");

            // Get the next position in the queue for the new user
            int positionInQueue = await this.GetWaitlistSize(waitlistProduct.WaitlistProductID) + 1;

            // Create the new entry in the UserWaitList table
            UserWaitList userWaitListToBeAdded = new UserWaitList
            {
                UserWaitListID = 0, // This will be auto-generated by the database
                UserID = userId,
                ProductWaitListID = waitlistProduct.WaitlistProductID,
                PositionInQueue = positionInQueue,
                JoinedTime = DateTime.UtcNow,
            };

            this.dbContext.UserWaitList.Add(userWaitListToBeAdded);
            await this.dbContext.SaveChangesAsync();
        }

        /// <summary>
        /// Removes a user from the waitlist and adjusts the queue positions.
        /// </summary>
        /// <param name="userId">The ID of the user to be removed from the waitlist. Must be a positive integer.</param>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <exception cref="Exception">Thrown when the waitlist product entry does not exist.</exception>
        public async Task RemoveUserFromWaitlist(int userId, int productId)
        {
            // Check if the WaitlistProduct exists and get the WaitListProductID
            int waitListProductID = await this.dbContext.WaitlistProducts.Where(waitlistProduct => waitlistProduct.ProductID == productId).Select(waitlistProduct => waitlistProduct.WaitlistProductID).FirstOrDefaultAsync();
            if (waitListProductID == 0)
            {
                throw new Exception($"RemoveUserFromWaitlist: No ProductWaitList with id: {productId}");
            }

            // Check if the UserWaitList exists
            UserWaitList userWaitListToBeRemoved = await this.dbContext.UserWaitList.FirstOrDefaultAsync(userWaitList => userWaitList.UserID == userId && userWaitList.ProductWaitListID == waitListProductID)
                                                        ?? throw new Exception($"RemoveUserFromWaitlist: No UserWaitList with userId: {userId} and productWaitListId: {waitListProductID}");
            this.dbContext.UserWaitList.Remove(userWaitListToBeRemoved);
            await this.dbContext.SaveChangesAsync();
        }

        /// <summary>
        /// Retrieves all users in a waitlist for a given waitlist product ID.
        /// </summary>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>A list of UserWaitList objects representing the users in the waitlist.</returns>
        /// <exception cref="Exception">Thrown when there is no ProductWaitList entry with the given productId.</exception>
        public async Task<List<UserWaitList>> GetUsersInWaitlist(int productId)
        {
            // Check if the WaitlistProduct exists and get the WaitListProductID
            int waitListProductID = await this.dbContext.WaitlistProducts.Where(waitlistProduct => waitlistProduct.ProductID == productId).Select(waitlistProduct => waitlistProduct.WaitlistProductID).FirstOrDefaultAsync();
            if (waitListProductID == 0)
            {
                throw new Exception($"GetUsersInWaitlist: No ProductWaitList with id: {productId}");
            }

            List<UserWaitList> usersInWaitlist = await this.dbContext.UserWaitList.Where(userWaitList => userWaitList.ProductWaitListID == waitListProductID).ToListAsync();
            return usersInWaitlist;
        }

        /// <summary>
        /// Gets all waitlists that a user is part of.
        /// </summary>
        /// <param name="userId">The ID of the user. Must be a positive integer.</param>
        /// <returns>A list of UserWaitList objects representing the waitlists the user is part of.</returns>
        public async Task<List<UserWaitList>> GetUserWaitlists(int userId)
        {
            List<UserWaitList> userWaitlists = await this.dbContext.UserWaitList.Where(userWaitList => userWaitList.UserID == userId).ToListAsync();
            return userWaitlists;
        }

        /// <summary>
        /// Gets the number of users in a product's waitlist.
        /// </summary>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>The number of users in the waitlist.</returns>
        /// <exception cref="Exception">Thrown when there is no ProductWaitList entry with the given productId.</exception>
        public async Task<int> GetWaitlistSize(int productId)
        {
            // Check if the WaitlistProduct exists and get the WaitListProductID
            int waitListProductID = await this.dbContext.WaitlistProducts.Where(waitlistProduct => waitlistProduct.ProductID == productId).Select(waitlistProduct => waitlistProduct.WaitlistProductID).FirstOrDefaultAsync();
            if (waitListProductID == 0)
            {
                throw new Exception($"GetWaitlistSize: No ProductWaitList with id: {productId}");
            }

            // Get the number of users in the waitlist
            int waitlistSize = await this.dbContext.UserWaitList.CountAsync(userWaitList => userWaitList.ProductWaitListID == waitListProductID);
            return waitlistSize;
        }

        /// <summary>
        /// Checks if a user is in a product's waitlist.
        /// </summary>
        /// <param name="userId">The ID of the user. Must be a positive integer.</param>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>True if the user is in the waitlist, otherwise false.</returns>
        /// <exception cref="Exception">Thrown when there is no ProductWaitList entry with the given productId.</exception>
        public async Task<bool> IsUserInWaitlist(int userId, int productId)
        {
            // Check if the WaitlistProduct exists and get the WaitListProductID
            int waitListProductID = await this.dbContext.WaitlistProducts.Where(waitlistProduct => waitlistProduct.ProductID == productId).Select(waitlistProduct => waitlistProduct.WaitlistProductID).FirstOrDefaultAsync();
            if (waitListProductID == 0)
            {
                throw new Exception($"IsUserInWaitlist: No ProductWaitList with id: {productId}");
            }

            // Check if UserWaitList entry exists with the given userId and fetched waitListProductID
            bool isInWaitlist = await this.dbContext.UserWaitList.AnyAsync(userWaitList => userWaitList.UserID == userId && userWaitList.ProductWaitListID == waitListProductID);
            return isInWaitlist;
        }

        /// <summary>
        /// Gets the position of a user in a product's waitlist.
        /// </summary>
        /// <param name="userId">The ID of the user. Must be a positive integer.</param>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>The position of the user in the waitlist, or -1 if the user is not in the waitlist.</returns>
        /// <exception cref="Exception">Thrown when there is no ProductWaitList entry with the given productId.</exception>
        public async Task<int> GetUserWaitlistPosition(int userId, int productId)
        {
            // Check if the WaitlistProduct exists and get the WaitListProductID
            int waitListProductID = await this.dbContext.WaitlistProducts.Where(waitlistProduct => waitlistProduct.ProductID == productId).Select(waitlistProduct => waitlistProduct.WaitlistProductID).FirstOrDefaultAsync();
            if (waitListProductID == 0)
            {
                throw new Exception($"GetUserWaitlistPosition: No ProductWaitList with id: {productId}");
            }

            // Get the position of the user in the waitlist
            int positionInQueue = await this.dbContext.UserWaitList.Where(userWaitList => userWaitList.UserID == userId && userWaitList.ProductWaitListID == waitListProductID).Select(userWaitList => userWaitList.PositionInQueue).FirstOrDefaultAsync();
            return positionInQueue != 0 ? positionInQueue : -1;
        }

        /// <summary>
        /// Retrieves all users in a waitlist for a given product, ordered by their position in the queue.
        /// </summary>
        /// <param name="productId">The ID of the product. Must be a positive integer.</param>
        /// <returns>A list of UserWaitList objects representing the users in the waitlist, ordered by their position in the queue.</returns>
        /// <exception cref="Exception">Thrown when there is no ProductWaitList entry with the given productId.</exception>
        public async Task<List<UserWaitList>> GetUsersInWaitlistOrdered(int productId)
        {
            try
            {
                List<UserWaitList> usersInWaitlist = await this.GetUsersInWaitlist(productId);
                List<UserWaitList> orderedUsers = usersInWaitlist.OrderBy(userWaitList => userWaitList.PositionInQueue).ToList();
                return orderedUsers;
            }
            catch (Exception ex)
            {
                throw new Exception($"GetUsersInWaitlistOrdered: {ex.Message}");
            }
        }
    }
}