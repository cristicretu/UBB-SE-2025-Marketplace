@model List<MarketMinds.Shared.Models.Product>
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                <svg class="w-8 h-8 mr-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
                Shopping Cart
            </h1>
            <p class="text-gray-600 mt-2">Review your items before checkout</p>
        </div>

        @if (Model == null || !Model.Any())
        {
            <!-- Empty Cart State -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
                <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6">
                    <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                    </svg>
                </div>
                <h2 class="text-2xl font-semibold text-gray-900 mb-2">Your cart is empty</h2>
                <p class="text-gray-600 mb-8">Looks like you haven't added any items to your cart yet.</p>
                <a href="@Url.Action("Index", "Home")" 
                   class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors shadow-sm">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
                    </svg>
                    Continue Shopping
                </a>
            </div>
        }
        else
        {
            <div class="lg:grid lg:grid-cols-12 lg:gap-x-8">
                <!-- Cart Items -->
                <div class="lg:col-span-8">
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                        <!-- Cart Header -->
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">
                                Cart Items (@Model.Count @(Model.Count == 1 ? "item" : "items"))
                            </h2>
                        </div>

                        <!-- Cart Items -->
                        <div class="px-6 py-4" id="cart-items">
                            @foreach (var item in Model)
                            {
                                <div class="product-row flex items-center py-6 border-b border-gray-200 last:border-b-0" data-product-id="@item.Id">
                                    <!-- Product Image Placeholder -->
                                    <div class="flex-shrink-0 w-20 h-20 bg-gray-100 rounded-lg flex items-center justify-center mr-4">
                                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                    </div>

                                    <!-- Product Details -->
                                    <div class="flex-1 min-w-0">
                                        <h3 class="text-lg font-medium text-gray-900 mb-2">@item.Title</h3>
                                        <p class="text-lg font-semibold text-blue-600">@(item.Price.ToString("0.00")) €</p>
                                        
                                        @{
                                            var quantity = ViewBag.Quantities != null && ViewBag.Quantities.ContainsKey(item.Id) ?
                                            ViewBag.Quantities[item.Id] : 1;

                                            var stock = 0;
                                            var productType = "Unknown";

                                            if (item is MarketMinds.Shared.Models.BuyProduct buyProduct)
                                            {
                                                stock = buyProduct.Stock;
                                                productType = "BuyProduct";
                                            }
                                            else
                                            {
                                                productType = item.GetType().Name;
                                            }
                                        }
                                        
                                        <div class="flex items-center mt-3 space-x-3">
                                            <!-- Quantity Controls -->
                                            <div class="flex items-center border border-gray-300 rounded-lg">
                                                <button class="quantity-btn minus-btn flex items-center justify-center w-8 h-8 text-gray-500 hover:text-gray-700 hover:bg-gray-50 transition-colors rounded-l-lg"
                                                        data-product-id="@item.Id">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                                    </svg>
                                                </button>
                                                <input type="number" class="quantity-input w-12 h-8 text-center border-0 text-sm focus:ring-0"
                                                       value="@quantity" min="1" max="@stock" data-product-id="@item.Id"
                                                       data-product-type="@productType" data-product-stock="@stock">
                                                <button class="quantity-btn plus-btn flex items-center justify-center w-8 h-8 text-gray-500 hover:text-gray-700 hover:bg-gray-50 transition-colors rounded-r-lg"
                                                        data-product-id="@item.Id">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                            
                                            <span class="text-sm text-gray-500">Stock: @stock</span>
                                        </div>
                                    </div>

                                    <!-- Item Total and Remove -->
                                    <div class="flex flex-col items-end ml-4">
                                        <p class="text-lg font-semibold text-gray-900 item-total mb-3" data-product-id="@item.Id">
                                            @((item.Price * quantity).ToString("0.00")) €
                                        </p>
                                        <button type="button"
                                                class="remove-item-btn inline-flex items-center px-3 py-1.5 text-sm text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors"
                                                data-product-id="@item.Id">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="lg:col-span-4 mt-8 lg:mt-0">
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 sticky top-8">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-900">Order Summary</h2>
                        </div>
                        
                        <div class="px-6 py-4 space-y-4">
                            <div class="flex justify-between items-center text-sm text-gray-600">
                                <span>Subtotal (@Model.Count @(Model.Count == 1 ? "item" : "items"))</span>
                                <span id="cart-total">@(((double)ViewBag.CartTotal).ToString("0.00")) €</span>
                            </div>
                            
                            <div class="flex justify-between items-center text-sm text-gray-600">
                                <span>Shipping</span>
                                <span class="text-green-600">Free</span>
                            </div>
                            
                            <div class="border-t border-gray-200 pt-4">
                                <div class="flex justify-between items-center text-lg font-semibold text-gray-900">
                                    <span>Total</span>
                                    <span id="cart-final-total">@(((double)ViewBag.CartTotal).ToString("0.00")) €</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="px-6 py-4 border-t border-gray-200">
                            <button id="purchase-btn" 
                                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors shadow-sm flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                                </svg>
                                Proceed to Checkout
                            </button>
                            
                            <a href="@Url.Action("Index", "Home")" 
                               class="block w-full text-center text-blue-600 hover:text-blue-700 font-medium py-3 transition-colors">
                                Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle quantity buttons
            $(".quantity-btn").click(function () {
                const productId = $(this).data("product-id");
                const input = $(`input.quantity-input[data-product-id="${productId}"]`);
                let quantity = parseInt(input.val());
                const maxStock = parseInt(input.attr("max"));

                if ($(this).hasClass("plus-btn")) {
                    // Don't increment if already at or above max stock
                    if (maxStock !== undefined && quantity >= maxStock) {
                        showNotification(`Cannot add more than the available stock (${maxStock}).`, 'error');
                        return;
                    }
                    quantity += 1;
                } else if ($(this).hasClass("minus-btn")) {
                    if (quantity > 1) quantity -= 1;
                }

                input.val(quantity);
                updateCartItemQuantity(productId, quantity);
            });

            // Handle direct input changes
            $(".quantity-input").change(function () {
                const productId = $(this).data("product-id");
                let quantity = parseInt($(this).val());
                const maxStock = parseInt($(this).attr("max"));

                if (isNaN(quantity) || quantity < 1) {
                    quantity = 1;
                    $(this).val(1);
                } else if (maxStock !== undefined && quantity > maxStock) {
                    quantity = maxStock;
                    $(this).val(maxStock);
                    showNotification(`Cannot add more than the available stock (${maxStock}).`, 'error');
                }

                updateCartItemQuantity(productId, quantity);
            });

            // Purchase button action
            $("#purchase-btn").click(function () {
                window.location.href = '@Url.Action("Checkout", "ShoppingCart")';
            });

            // Remove item button action (using AJAX)
            $(document).on("click", ".remove-item-btn", function () {
                const productId = $(this).data("product-id");

                // Add loading state
                const button = $(this);
                const originalText = button.html();
                button.html('<svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>');
                button.prop('disabled', true);

                $.ajax({
                    url: '@Url.Action("RemoveFromCart", "ShoppingCart")',
                    type: 'POST',
                    data: { productId: productId },
                    success: function (response) {
                        // Remove the row with animation
                        $(`.product-row[data-product-id="${productId}"]`).fadeOut(300, function () {
                            $(this).remove();

                            // Check if cart is now empty
                            if ($("#cart-items .product-row").length === 0) {
                                location.reload(); // Refresh to show empty cart message
                            } else {
                                // Update cart total by requesting current total
                                $.ajax({
                                    url: '@Url.Action("GetCartTotal", "ShoppingCart")',
                                    type: 'GET',
                                    success: function (totalResponse) {
                                        const total = parseFloat(totalResponse).toFixed(2) + " €";
                                        $("#cart-total").text(total);
                                        $("#cart-final-total").text(total);
                                    }
                                });
                            }
                        });
                        
                        showNotification('Item removed from cart', 'success');
                    },
                    error: function () {
                        showNotification('An error occurred while removing the item.', 'error');
                        button.html(originalText);
                        button.prop('disabled', false);
                    }
                });
            });

            // Function to update cart item quantity via AJAX
            function updateCartItemQuantity(productId, quantity) {
                // Store the current input value
                const input = $(`input.quantity-input[data-product-id="${productId}"]`);
                const originalValue = input.val();

                $.ajax({
                    url: '@Url.Action("UpdateQuantity", "ShoppingCart")',
                    type: 'POST',
                    data: { productId: productId, quantity: quantity },
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            $(`td.item-total[data-product-id="${productId}"], p.item-total[data-product-id="${productId}"]`).text(response.itemTotal.replace("lei", "€"));
                            const total = response.total.replace("lei", "€");
                            $("#cart-total").text(total);
                            $("#cart-final-total").text(total);
                        } else {
                            // Alert the error message and restore original value
                            showNotification(response.message, 'error');
                            input.val(originalValue);
                        }
                    },
                    error: function (xhr) {
                        // Try to get the error message from the response
                        let errorMessage = 'An error occurred while updating the quantity.';
                        try {
                            const response = JSON.parse(xhr.responseText);
                            if (response && response.message) {
                                errorMessage = response.message;
                            }
                        } catch (e) {
                            // If we can't parse the error, just use the default message
                        }

                        // Alert the error and restore original value
                        showNotification(errorMessage, 'error');
                        input.val(originalValue);
                    }
                });
            }

            // Simple notification function
            function showNotification(message, type = 'info') {
                const notification = $(`
                    <div class="fixed top-4 right-4 z-50 max-w-sm w-full bg-white border border-gray-200 rounded-lg shadow-lg p-4 ${type === 'error' ? 'border-red-200' : type === 'success' ? 'border-green-200' : 'border-blue-200'}">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                ${type === 'error' ? 
                                    '<svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>' :
                                    type === 'success' ?
                                    '<svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>' :
                                    '<svg class="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
                                }
                            </div>
                            <div class="ml-3 w-0 flex-1">
                                <p class="text-sm font-medium text-gray-900">${message}</p>
                            </div>
                            <div class="ml-4 flex-shrink-0 flex">
                                <button class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500" onclick="$(this).closest('.fixed').remove()">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                `);
                
                $('body').append(notification);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    notification.fadeOut(300, function() {
                        $(this).remove();
                    });
                }, 5000);
            }
        });
    </script>
}
