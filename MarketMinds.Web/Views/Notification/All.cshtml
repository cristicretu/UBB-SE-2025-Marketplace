@using MarketMinds.Shared.Models
@model List<MarketMinds.Shared.Models.Notification>

@{
    ViewData["Title"] = "All Notifications";
}

<div class="max-w-4xl mx-auto">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Notifications</h1>
                    <p class="text-sm text-gray-600 mt-1">
                        @{
                            var unreadCount = Model.Count(n => !n.IsRead);
                            var totalCount = Model.Count;
                        }
                        @if (unreadCount > 0)
                        {
                            <span>@unreadCount unread of @totalCount total notifications</span>
                        }
                        else
                        {
                            <span>All @totalCount notifications have been read</span>
                        }
                    </p>
                </div>
                
                <div class="flex space-x-3">
                    @if (unreadCount > 0)
                    {
                        <form asp-controller="Notification" asp-action="MarkAllAsRead" method="post" class="inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" 
                                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Mark All as Read
                            </button>
                        </form>
                    }
                    
                    @if (totalCount > 0)
                    {
                        <form asp-controller="Notification" asp-action="ClearAll" method="post" class="inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" 
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                                    onclick="return confirm('Are you sure you want to clear all notifications? This action cannot be undone.')">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                Clear All
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Notifications List -->
    @if (Model.Any())
    {
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="divide-y divide-gray-200">
                @foreach (var notification in Model.OrderByDescending(n => n.Timestamp))
                {
                    <div class="p-6 @(notification.IsRead ? "" : "bg-blue-50 border-l-4 border-l-blue-500")" data-notification-id="@notification.NotificationID">
                        <div class="flex items-start space-x-4">
                            <!-- Notification Icon -->
                            <div class="flex-shrink-0 mt-1">
                                @{
                                    string iconClass = "text-blue-500";
                                    string iconPath = "";
                                    
                                    switch (notification.Category)
                                    {
                                        case NotificationCategory.ORDER_SHIPPING_PROGRESS:
                                            iconClass = "text-purple-500";
                                            iconPath = "M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4";
                                            break;
                                        case NotificationCategory.PAYMENT_CONFIRMATION:
                                            iconClass = "text-green-500";
                                            iconPath = "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z";
                                            break;
                                        case NotificationCategory.CONTRACT_EXPIRATION:
                                            iconClass = "text-yellow-500";
                                            iconPath = "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z";
                                            break;
                                        case NotificationCategory.PRODUCT_AVAILABLE:
                                            iconClass = "text-blue-500";
                                            iconPath = "M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 5z";
                                            break;
                                        case NotificationCategory.PRODUCT_REMOVED:
                                            iconClass = "text-red-500";
                                            iconPath = "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16";
                                            break;
                                        case NotificationCategory.OUTBIDDED:
                                            iconClass = "text-pink-500";
                                            iconPath = "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6";
                                            break;
                                        case NotificationCategory.CONTRACT_RENEWAL_REQ:
                                            iconClass = "text-orange-500";
                                            iconPath = "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z";
                                            break;
                                        case NotificationCategory.CONTRACT_RENEWAL_ANS:
                                            iconClass = "text-indigo-500";
                                            iconPath = "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z";
                                            break;
                                        case NotificationCategory.CONTRACT_RENEWAL_WAITLIST:
                                            iconClass = "text-teal-500";
                                            iconPath = "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z";
                                            break;
                                        default:
                                            iconClass = "text-gray-500";
                                            iconPath = "M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9";
                                            break;
                                    }
                                }
                                
                                <div class="w-10 h-10 @(notification.IsRead ? "bg-gray-100" : "bg-blue-50") rounded-full flex items-center justify-center">
                                    <svg class="w-5 h-5 @iconClass" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@iconPath" />
                                    </svg>
                                </div>
                            </div>
                            
                            <!-- Notification Content -->
                            <div class="flex-1 min-w-0">
                                <!-- Title and Status -->
                                <div class="flex items-center justify-between mb-2">
                                    <h3 class="text-lg font-medium text-gray-900 @(notification.IsRead ? "" : "font-semibold")">
                                        @notification.Title
                                    </h3>
                                    @if (!notification.IsRead)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                            New
                                        </span>
                                    }
                                </div>
                                
                                <!-- Content with formatted information -->
                                <div class="text-gray-600 mb-3">
                                    @switch (notification)
                                    {
                                        case OrderShippingProgressNotification orderShipping:
                                            <div>
                                                <p class="mb-2">
                                                    Order <span class="font-medium text-gray-900">#@orderShipping.OrderID</span> has been updated to: 
                                                    <span class="@(orderShipping.ShippingState == "Delivered" ? "text-green-600" : "text-blue-600") font-medium">@orderShipping.ShippingState</span>
                                                </p>
                                                <p class="text-sm text-gray-500">Expected delivery: @orderShipping.DeliveryDate.ToString("MMMM dd, yyyy")</p>
                                            </div>
                                            break;
                                        
                                        case PaymentConfirmationNotification paymentConfirmation:
                                            <div>
                                                <p class="mb-2">Your payment for order <span class="font-medium text-gray-900">#@paymentConfirmation.OrderID</span> has been confirmed.</p>
                                                <p class="text-sm text-gray-500">Product ID: @paymentConfirmation.ProductID</p>
                                            </div>
                                            break;
                                        
                                        case ContractExpirationNotification contractExpiration:
                                            <div>
                                                <p class="mb-2">
                                                    Contract <span class="font-medium text-gray-900">#@contractExpiration.ContractID</span> will expire on 
                                                    <span class="font-medium text-yellow-600">@contractExpiration.ExpirationDate.ToString("MMMM dd, yyyy")</span>
                                                </p>
                                                <p class="text-sm text-gray-500">Please take action before the expiration date.</p>
                                            </div>
                                            break;
                                        
                                        case ProductAvailableNotification productAvailable:
                                            <p>Product <span class="font-medium text-gray-900">#@productAvailable.ProductID</span> is now back in stock and available for purchase!</p>
                                            break;
                                        
                                        case ProductRemovedNotification productRemoved:
                                            <p>Product <span class="font-medium text-gray-900">#@productRemoved.ProductID</span> has been removed from the marketplace and is no longer available.</p>
                                            break;
                                        
                                        case OutbiddedNotification outbidded:
                                            <p>You've been outbid on product <span class="font-medium text-gray-900">#@outbidded.ProductID</span>. Place a new bid to stay in the running!</p>
                                            break;
                                        
                                        case ContractRenewalRequestNotification contractRenewal:
                                            <p>A contract renewal request has been submitted for contract <span class="font-medium text-gray-900">#@contractRenewal.ContractID</span>. Please review and respond.</p>
                                            break;
                                        
                                        case ContractRenewalAnswerNotification contractAnswer:
                                            <div>
                                                <p class="mb-2">
                                                    Contract <span class="font-medium text-gray-900">#@contractAnswer.ContractID</span> renewal request has been 
                                                    <span class="@(contractAnswer.IsAccepted ? "text-green-600" : "text-red-600") font-medium">@(contractAnswer.IsAccepted ? "accepted" : "rejected")</span>.
                                                </p>
                                                @if (contractAnswer.IsAccepted)
                                                {
                                                    <p class="text-sm text-gray-500">You can download the renewed contract from your account.</p>
                                                }
                                            </div>
                                            break;
                                        
                                        case ContractRenewalWaitlistNotification waitlist:
                                            <p>A user has renewed their contract for product <span class="font-medium text-gray-900">#@waitlist.ProductID</span> that you are on the waitlist for. Your position in the waitlist may have changed.</p>
                                            break;
                                        
                                        default:
                                            <p>@notification.Content</p>
                                            break;
                                    }
                                </div>
                                
                                <!-- Timestamp -->
                                <div class="text-sm text-gray-500">
                                    @{
                                        var timeSpan = DateTime.Now - notification.Timestamp;
                                        string timeAgo;
                                        
                                        if (timeSpan.TotalMinutes < 1)
                                            timeAgo = "Just now";
                                        else if (timeSpan.TotalHours < 1)
                                            timeAgo = $"{(int)timeSpan.TotalMinutes} minutes ago";
                                        else if (timeSpan.TotalDays < 1)
                                            timeAgo = $"{(int)timeSpan.TotalHours} hours ago";
                                        else if (timeSpan.TotalDays < 7)
                                            timeAgo = $"{(int)timeSpan.TotalDays} days ago";
                                        else
                                            timeAgo = notification.Timestamp.ToString("MMMM dd, yyyy 'at' h:mm tt");
                                    }
                                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    @timeAgo
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
            <div class="w-24 h-24 mx-auto mb-6 bg-blue-50 rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
            </div>
            <h3 class="text-xl font-medium text-gray-900 mb-2">No notifications yet</h3>
            <p class="text-gray-500 max-w-md mx-auto">You're all caught up! When you have new notifications, they'll appear here.</p>
        </div>
    }
</div> 