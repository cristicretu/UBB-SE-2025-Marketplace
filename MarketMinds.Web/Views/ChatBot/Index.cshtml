@model MarketMinds.Web.Models.ChatViewModel
@using MarketMinds.Web.Models
@{
    ViewData["Title"] = "ChatBot";
    const int DefaultBotId = 0;
    const int StartIndex = 0;
    var currentUserId = User.GetCurrentUserId();
}

@* Added this to make it prettier (vibe code all the way) *@
@* works if you remove (just not as pretty) *@
<style>
    /* Markdown styling */
    .markdown-content {
        line-height: 1.5;
    }
    
    /* Bot message markdown styles */
    .bg-gray-100 .markdown-content {
        color: #333;
    }
    
    /* User message markdown styles - lighter colors for dark background */
    .bg-blue-600 .markdown-content {
        color: #fff;
    }
    
    /* Common Markdown element styles */
    .markdown-content h1 {
        font-size: 1.5rem;
        font-weight: bold;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    .markdown-content h2 {
        font-size: 1.25rem;
        font-weight: bold;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    .markdown-content h3, .markdown-content h4, .markdown-content h5, .markdown-content h6 {
        font-size: 1.1rem;
        font-weight: bold;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    .markdown-content p {
        margin-bottom: 0.5rem;
    }
    
    .markdown-content ul, .markdown-content ol {
        margin-left: 1.5rem;
        margin-bottom: 0.5rem;
    }
    
    .markdown-content ul {
        list-style-type: disc;
    }
    
    .markdown-content ol {
        list-style-type: decimal;
    }
    
    .markdown-content li {
        margin-bottom: 0.25rem;
    }
    
    .markdown-content code {
        font-family: monospace;
        padding: 0.1rem 0.3rem;
        border-radius: 3px;
    }
    
    .bg-gray-100 .markdown-content code {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .bg-blue-600 .markdown-content code {
        background-color: rgba(255, 255, 255, 0.2);
    }
    
    .markdown-content pre {
        padding: 0.5rem;
        border-radius: 5px;
        overflow-x: auto;
        margin-bottom: 0.5rem;
    }
    
    .bg-gray-100 .markdown-content pre {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .bg-blue-600 .markdown-content pre {
        background-color: rgba(0, 0, 0, 0.2);
    }
    
    .markdown-content pre code {
        background-color: transparent;
        padding: 0;
    }
    
    .markdown-content blockquote {
        border-left: 3px solid;
        padding-left: 0.5rem;
        margin-left: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    .bg-gray-100 .markdown-content blockquote {
        border-color: #cbd5e0;
    }
    
    .bg-blue-600 .markdown-content blockquote {
        border-color: rgba(255, 255, 255, 0.5);
    }
    
    .markdown-content a {
        text-decoration: underline;
    }
    
    .bg-gray-100 .markdown-content a {
        color: #3B82F6;
    }
    
    .bg-blue-600 .markdown-content a {
        color: #fff;
        font-weight: bold;
    }
    
    .markdown-content table {
        border-collapse: collapse;
        margin-bottom: 0.5rem;
        width: 100%;
    }
    
    .markdown-content th, .markdown-content td {
        padding: 0.25rem 0.5rem;
        border: 1px solid;
    }
    
    .bg-gray-100 .markdown-content th, .bg-gray-100 .markdown-content td {
        border-color: #cbd5e0;
    }
    
    .bg-blue-600 .markdown-content th, .bg-blue-600 .markdown-content td {
        border-color: rgba(255, 255, 255, 0.3);
    }
    
    .markdown-content hr {
        margin: 0.5rem 0;
        border: 0;
        height: 1px;
    }
    
    .bg-gray-100 .markdown-content hr {
        background-color: #cbd5e0;
    }
    
    .bg-blue-600 .markdown-content hr {
        background-color: rgba(255, 255, 255, 0.3);
    }
</style>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                <svg class="w-8 h-8 mr-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
                AI Assistant
            </h1>
            <p class="text-gray-600 mt-2">Get help with your questions and tasks</p>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <!-- Conversations List -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 h-[600px] flex flex-col">
                    <div class="flex items-center justify-between p-6 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a2 2 0 01-2-2v-6a2 2 0 012-2h8z"></path>
                            </svg>
                            Conversations
                        </h2>
                        <form asp-action="CreateConversation" asp-controller="ChatBot" method="post">
                            @Html.AntiForgeryToken()
                            <button type="submit" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg transition-colors shadow-sm">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                            </button>
                        </form>
                    </div>
                    
                    <div class="flex-1 p-4 overflow-y-auto">
                        @if (Model.Conversations != null && Model.Conversations.Any())
                        {
                            <div class="space-y-3">
                                @foreach (var conversation in Model.Conversations)
                                {
                                    <a href="@Url.Action("Index", "ChatBot", new { conversationId = conversation.Id })" 
                                       class="block p-4 rounded-lg transition-all duration-200 hover:shadow-sm
                                              @(Model.CurrentConversation?.Id == conversation.Id 
                                                  ? "bg-blue-50 border-2 border-blue-200" 
                                                  : "bg-gray-50 hover:bg-gray-100 border-2 border-transparent")">
                                        <div class="flex items-center space-x-3">
                                            <div class="flex-shrink-0 w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                                </svg>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <p class="font-semibold text-gray-900">Chat @conversation.Id</p>
                                                <p class="text-sm text-gray-500 truncate">@(DateTime.Now.AddDays(-conversation.Id % 7).ToString("MMM dd, yyyy"))</p>
                                            </div>
                                        </div>
                                    </a>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-12">
                                <div class="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                    </svg>
                                </div>
                                <p class="text-gray-600 font-medium">No conversations yet</p>
                                <p class="text-sm text-gray-500 mt-1">Click the + button to start a new chat</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Chat Area -->
            <div class="lg:col-span-3">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 h-[600px] flex flex-col">
                    <!-- Chat Header -->
                    <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                    </svg>
                                </div>
                                <div>
                                    <h2 class="text-lg font-semibold text-gray-900">
                                        @if (Model.CurrentConversation != null)
                                        {
                                            <span>Chat @Model.CurrentConversation.Id</span>
                                        }
                                        else
                                        {
                                            <span>AI Assistant</span>
                                        }
                                    </h2>
                                    <p class="text-sm text-gray-500">
                                        @if (Model.CurrentConversation != null)
                                        {
                                            <span class="flex flex-row items-center">
                                                <div class="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                                                <span>Online</span>
                                            </span>
                                        }
                                        else
                                        {
                                            <span>Select or create a conversation to start chatting</span>
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Messages Container -->
                    <div class="flex-1 p-6 overflow-y-auto space-y-4" id="messagesContainer">
                        @if (Model.Messages != null && Model.Messages.Any())
                        {
                            @for (int messageIndex = StartIndex; messageIndex < Model.Messages.Count; messageIndex++)
                            {
                                var message = Model.Messages[messageIndex];
                                var isUserMessage = message.UserId != DefaultBotId; // Message is from user if UserId is not 0 (bot)
                                
                                @if (isUserMessage)
                                {
                                    <!-- User Message -->
                                    <div class="flex justify-end">
                                        <div class="max-w-[80%] bg-blue-600 text-white rounded-lg rounded-br-sm px-4 py-3 shadow-sm">
                                            <div class="markdown-content" data-content="@message.Content"></div>
                                            <div class="text-xs text-blue-100 mt-2">You</div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <!-- Bot Message -->
                                    <div class="flex justify-start">
                                        <div class="flex items-start space-x-3 max-w-[80%]">
                                            <div class="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                                                <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                                </svg>
                                            </div>
                                            <div class="bg-gray-100 rounded-lg rounded-bl-sm px-4 py-3 shadow-sm">
                                                <div class="markdown-content" data-content="@message.Content"></div>
                                                <div class="text-xs text-gray-500 mt-2">AI Assistant</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                        else if (Model.CurrentConversation != null)
                        {
                            <div class="flex justify-center items-center h-full">
                                <div class="text-center">
                                    <div class="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                                        <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                        </svg>
                                    </div>
                                    <p class="text-gray-600 font-medium">Start the conversation!</p>
                                    <p class="text-sm text-gray-500 mt-1">Type a message below to begin chatting with AI</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="flex justify-center items-center h-full">
                                <div class="text-center">
                                    <div class="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a2 2 0 01-2-2v-6a2 2 0 012-2h8z"></path>
                                        </svg>
                                    </div>
                                    <p class="text-gray-600 font-medium">Select a conversation</p>
                                    <p class="text-sm text-gray-500 mt-1">Choose an existing conversation or create a new one to start chatting</p>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Message Input -->
                    <div class="border-t border-gray-200 p-6">
                        @if (Model.CurrentConversation != null)
                        {
                            <form asp-action="SendMessage" asp-controller="ChatBot" method="post" class="flex items-end space-x-4">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="conversationId" value="@Model.CurrentConversation.Id" />
                                <div class="flex-1">
                                    <div class="relative">
                                        <input 
                                            type="text" 
                                            name="content"
                                            id="messageInput"
                                            class="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors pr-12" 
                                            placeholder="Type your message here..."
                                            required
                                        />
                                        <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                                <button type="submit" 
                                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors shadow-sm flex items-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                                    </svg>
                                    Send
                                </button>
                            </form>
                        }
                        else
                        {
                            <div class="flex items-end space-x-4">
                                <div class="flex-1">
                                    <input 
                                        type="text" 
                                        class="block w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-100 text-gray-500" 
                                        placeholder="Select a conversation first..."
                                        disabled
                                    />
                                </div>
                                <button class="bg-gray-400 text-white font-medium py-3 px-6 rounded-lg cursor-not-allowed flex items-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                                    </svg>
                                    Send
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Scroll to bottom of messages on page load
        document.addEventListener('DOMContentLoaded', function() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Auto-focus the message input if a conversation is selected
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.focus();
            }
            
            // Process all markdown content
            const markdownElements = document.querySelectorAll('.markdown-content');
            markdownElements.forEach(function(element) {
                const content = element.getAttribute('data-content');
                
                // Set up custom renderer for Marked
                const renderer = new marked.Renderer();
                
                // Sanitize content to prevent XSS attacks
                const sanitizeOutput = function(html) {
                    // Use DOMPurify to sanitize the HTML
                    return DOMPurify.sanitize(html);
                };
                
                // Render Markdown to HTML with custom options
                const html = marked.parse(content, {
                    renderer: renderer,
                    gfm: true, // GitHub Flavored Markdown
                    breaks: true, // Translate newlines to <br>
                    sanitize: false, // Don't sanitize here, we'll use DOMPurify
                    smartLists: true,
                    smartypants: true
                });
                
                // Apply sanitized HTML to element
                element.innerHTML = sanitizeOutput(html);
            });
        });

        // Add smooth scrolling when new messages are added
        function scrollToBottom() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                messagesContainer.scrollTo({
                    top: messagesContainer.scrollHeight,
                    behavior: 'smooth'
                });
            }
        }

        // Auto-resize textarea and handle enter key
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                // Handle Enter key to submit form
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.closest('form').submit();
                    }
                });
            }
        });
    </script>
} 