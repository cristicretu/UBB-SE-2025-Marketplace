@model MarketMinds.Web.Models.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
    var minPrice = ViewBag.MinPrice ?? 0;
    var maxPrice = ViewBag.MaxPrice ?? 1000;
    
    // Ensure we have sensible values
    if (maxPrice <= minPrice)
    {
        maxPrice = minPrice + 100;
    }

       
    // Add user role check similar to _Layout.cshtml
    bool isAuthenticated = User.Identity?.IsAuthenticated == true && UserSession.CurrentUserId.HasValue;
    
    int userType = 0;
    if (isAuthenticated && !string.IsNullOrEmpty(UserSession.CurrentUserRole))
    {
        if (int.TryParse(UserSession.CurrentUserRole, out int parsedType))
        {
            userType = parsedType;
        }
        else
        {
            switch (UserSession.CurrentUserRole)
            {
                case "Admin": userType = 1; break;
                case "Buyer": userType = 2; break;
                case "Seller": userType = 3; break;
                default: userType = 0; break;
            }
        }
    }
    
    bool isAdmin = isAuthenticated && userType == 1;
    bool isBuyer = isAuthenticated && userType == 2;
    bool isSeller = isAuthenticated && userType == 3;
    
    // Check if user can make purchases (admins and buyers)
    bool canPurchase = isAdmin || isBuyer;
}

<div class="flex flex-col md:flex-row">
    <!-- Sidebar with filters (collapsible) -->
    <div id="filterSidebar" class="w-full md:w-72 bg-white p-5 rounded-lg shadow-sm md:mr-5 mb-5 md:mb-0 border border-gray-200">
        <div class="flex justify-between items-center mb-5">
            <h3 class="text-lg font-semibold text-gray-800 flex items-center">
                <i class="fas fa-filter mr-2 text-gray-600"></i>
                Filters
            </h3>
            <button id="toggleFilters" class="md:hidden text-gray-500 hover:text-gray-700">
                <i class="fas fa-chevron-down"></i>
            </button>
        </div>
        
        <div id="filterContent" class="filter-content">
            <!-- Search bar -->
            <div class="mb-5">
                <div class="relative">
                    <input type="text" id="searchInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition" placeholder="Search products..." onkeypress="handleSearchKeyPress(event)">
                    <button id="searchButton" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 cursor-pointer" onclick="performSearch()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
            
            <hr class="my-4 border-t border-gray-200" />
            
            <!-- Price Range -->
            <div class="mb-5">
                <h4 class="font-medium mb-3 text-gray-700">Price Range</h4>
                <div class="space-y-3">
                    <div>
                        <input type="range" id="priceRange" class="w-full accent-primary" min="@minPrice" max="@maxPrice" step="1" value="@maxPrice">
                        <div class="flex justify-between text-sm text-gray-600 mt-1">
                            <span class="font-mono opacity-50">$<span id="minPriceValue">@minPrice</span></span>
                            <span class="font-mono">$<span id="currentPriceValue">@maxPrice</span></span>
                            <span class="font-mono opacity-50">$<span id="maxPriceValue">@maxPrice</span></span>
                        </div>
                    </div>
                </div>
            </div>
            
            <hr class="my-4 border-t border-gray-200" />
            
            <!-- Categories -->
            <div class="mb-5">
                <h4 class="font-medium mb-3 text-gray-700">Categories</h4>
                <div class="flex flex-wrap gap-2 max-h-48 overflow-y-auto pr-1">
                    @if (ViewBag.Categories != null)
                    {
                        @foreach (var category in ViewBag.Categories)
                        {
                            <button class="category-pill px-3 py-1 rounded-full bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200 text-sm transition-colors" 
                                    data-category-id="@category.Id">
                                @category.Name
                            </button>
                        }
                    }
                    else
                    {
                        <span class="text-gray-500">No categories available</span>
                    }
                </div>
            </div>
            
            <hr class="my-4 border-t border-gray-200" />
            
            <!-- Conditions -->
            <div class="mb-5">
                <h4 class="font-medium mb-3 text-gray-700">Condition</h4>
                <div class="flex flex-wrap gap-2">
                    @if (ViewBag.Conditions != null)
                    {
                        @foreach (var condition in ViewBag.Conditions)
                        {
                            <button class="condition-pill px-3 py-1 rounded-full bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200 text-sm transition-colors" 
                                    data-condition-id="@condition.Id">
                                @condition.Name
                            </button>
                        }
                    }
                    else
                    {
                        <span class="text-gray-500">No conditions available</span>
                    }
                </div>
            </div>
            
            <hr class="my-4 border-t border-gray-200" />
            
            <!-- if there are any filters applied, show the clear filters button -->
            <button id="clearFilters" class="w-full bg-gray-100 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-200 transition mb-2 border border-gray-300 opacity-50 cursor-not-allowed" disabled>
                <i class="fas fa-times mr-2"></i>Clear Filters
            </button>
        </div>
    </div>

    <!-- Main content area -->
    <div class="flex-1">
        <!-- Product Type Tabs -->
        <div class="mb-6">
            <div class="flex gap-3">
                <button id="buyTab" class="tab-btn active py-2 px-4 rounded-lg font-medium text-white bg-primary border border-primary shadow-sm hover:shadow-md transition-all flex items-center">
                    <i class="fas fa-shopping-bag mr-2"></i>
                    Buy Products
                </button>
                <button id="auctionTab" class="tab-btn py-2 px-4 rounded-lg font-medium text-gray-700 bg-white border border-gray-300 shadow-sm hover:shadow-md transition-all flex items-center">
                    <i class="fas fa-gavel mr-2"></i>
                    Auction Products
                </button>
                <button id="borrowTab" class="tab-btn py-2 px-4 rounded-lg font-medium text-gray-700 bg-white border border-gray-300 shadow-sm hover:shadow-md transition-all flex items-center">
                    <i class="fas fa-calendar-alt mr-2"></i>
                    Borrow Products
                </button>
            </div>
            
            <hr class="mt-4 mb-6 border-t border-gray-200" />
        </div>
        
        <!-- Products Grid - Buy Products (default view) -->
        <div id="buyProducts" class="tab-content">
            <div id="buyProductsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                @foreach (var item in Model.BuyProducts)
                {
                    <div class="product-item bg-white rounded-lg shadow-sm overflow-hidden transition-transform hover:shadow-md border border-gray-200"
                         data-price="@item.Price" 
                         data-category="@(item.Category?.Id ?? 0)" 
                         data-condition="@(item.Condition?.Id ?? 0)"
                         data-title="@item.Title.ToLower()"
                         data-seller="@(item.Seller?.Username?.ToLower() ?? "")">
                        <a href="@Url.Action("Details", "BuyProducts", new { id = item.Id })" class="block">
                            <div class="h-48 bg-gradient-to-r from-blue-50 to-blue-100 flex items-center justify-center">
                                @if (item.Images != null && item.Images.Any())
                                {
                                    <img src="@item.Images.First().Url" alt="@item.Title" class="h-full w-full object-cover">
                                }
                                else
                                {
                                    <div class="text-gray-400 text-lg">No Image</div>
                                }
                            </div>
                            <div class="p-4">
                                <div class="">
                                    <h3 class="font-semibold text-lg mb-1 truncate">@item.Title</h3>
                                    <p class="text-sm text-gray-500 mb-1">
                                        @if (item.Category != null)
                                        {
                                            <span>@(item.Category.Name ?? "Uncategorized")</span>
                                        }
                                        else
                                        {
                                            <span>Uncategorized</span>
                                        }
                                        â€¢
                                        @if (item.Condition != null)
                                        {
                                            <span>@(item.Condition.Name ?? "Unknown condition")</span>
                                        }
                                        else
                                        {
                                            <span>Unknown condition</span>
                                        }
                                    </p>
                                    <p class="text-sm text-gray-500 mb-2">
                                        @if (item.Seller != null)
                                        {
                                            <span>Seller: @item.Seller.Username</span>
                                        }
                                        else
                                        {
                                            <span>Unknown seller</span>
                                        }
                                    </p>
                                    <div class="flex justify-between items-center">
                                        <div class="font-bold text-primary">$@item.Price.ToString("N2")</div>
                                        @if (isBuyer)
                                        {
                                            var isInWishlist = ViewBag.WishlistProductIds != null && ((List<int>)ViewBag.WishlistProductIds).Contains(item.Id);
                                            
                                            if (isInWishlist)
                                            {
                                                <form asp-controller="BuyerWishlist" asp-action="RemoveFromWishlist" method="post" class="inline">
                                                    <input type="hidden" name="productId" value="@item.Id" />
                                                    <button type="submit" class="text-red-500 hover:text-red-600 transition" 
                                                            title="Remove from Wishlist" onclick="event.stopPropagation();">
                                                        <i class="fas fa-heart"></i>
                                                    </button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-controller="BuyerWishlist" asp-action="AddToWishlist" method="post" class="inline">
                                                    <input type="hidden" name="productId" value="@item.Id" />
                                                    <button type="submit" class="text-gray-400 hover:text-red-500 transition" 
                                                            title="Add to Wishlist" onclick="event.stopPropagation();">
                                                        <i class="far fa-heart"></i>
                                                    </button>
                                                </form>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </a>
                        <div class="px-4 pb-4">
                            @if (User.Identity.IsAuthenticated && canPurchase)
                            {
                                <form asp-controller="ShoppingCart" asp-action="AddToCart" method="post">
                                    <input type="hidden" name="productId" value="@item.Id" />
                                    <input type="hidden" name="quantity" value="1" />
                                    <button type="submit" class="w-full bg-primary text-white py-2 px-3 rounded-lg hover:bg-primary-dark transition flex items-center justify-center">
                                        <i class="fas fa-shopping-cart mr-2"></i>
                                        Add to Cart
                                    </button>
                                </form>
                            }
                            else if (isSeller)
                            {
                            }
                            else
                            {
                                <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" class="w-full bg-primary text-white py-2 px-3 rounded-lg hover:bg-primary-dark transition flex items-center justify-center inline-block text-center">
                                    <i class="fas fa-shopping-cart mr-2"></i>
                                    Add to Cart
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <!-- Products Grid - Auction Products (hidden initially) -->
        <div id="auctionProducts" class="tab-content hidden">
            <div id="auctionProductsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                @foreach (var item in Model.AuctionProducts)
                {
                    <div class="product-item bg-white rounded-lg shadow-sm overflow-hidden transition-transform hover:shadow-md border border-gray-200"
                         data-price="@item.CurrentPrice" 
                         data-category="@(item.Category?.Id ?? 0)" 
                         data-condition="@(item.Condition?.Id ?? 0)"
                         data-title="@item.Title.ToLower()"
                         data-seller="@(item.Seller?.Username?.ToLower() ?? "")">
                        <a href="@Url.Action("Details", "AuctionProducts", new { id = item.Id })" class="block">
                            <div class="h-48 bg-gradient-to-r from-purple-50 to-blue-50 flex items-center justify-center">
                                @if (item.Images != null && item.Images.Any())
                                {
                                    <img src="@item.Images.First().Url" alt="@item.Title" class="h-full w-full object-cover">
                                }
                                else
                                {
                                    <div class="text-gray-400 text-lg">No Image</div>
                                }
                            </div>
                            <div class="p-4">
                                <h2 class="text-xl font-semibold">@item.Title</h2>
                                <p class="text-gray-600 mb-1">@(item.Category?.Name ?? "Uncategorized")</p>
                                
                                @if (!string.IsNullOrEmpty(item.Description) && item.Description.Length > 50)
                                {
                                    <p class="text-gray-700 text-sm mb-3">@(item.Description.Substring(0, 50))...</p>
                                }
                                else
                                {
                                    <p class="text-gray-700 text-sm mb-3">@(item.Description ?? "No description")</p>
                                }
                                
                                <div class="flex justify-between items-center mb-3">
                                    <span class="text-primary font-bold text-xl">$@item.CurrentPrice.ToString("N2")</span>
                                    <span class="text-gray-600 text-sm">Starting: $@item.StartPrice.ToString("N2")</span>
                                </div>
                                
                                <div class="text-orange-600 font-medium mb-3" data-countdown="@item.EndTime.ToString("yyyy-MM-ddTHH:mm:ss")">
                                    Time left: 
                                    @{
                                        var timeLeft = item.EndTime - DateTime.Now;
                                        if (timeLeft > TimeSpan.Zero)
                                        {
                                            @($"{timeLeft.Days}d {timeLeft.Hours}h {timeLeft.Minutes}m")
                                        }
                                        else
                                        {
                                            <span class="text-red-600">Auction Ended</span>
                                        }
                                    }
                                </div>
                            </div>
                        </a>
                        <div class="px-4 pb-4">
                            @if (User.Identity.IsAuthenticated && canPurchase)
                            {
                                <form asp-controller="AuctionProducts" asp-action="PlaceBid" method="post">
                                    <input type="hidden" name="productId" value="@item.Id" />
                                    <button type="submit" class="w-full bg-purple-600 text-white py-2 px-3 rounded-lg hover:bg-purple-700 transition flex items-center justify-center">
                                        <i class="fas fa-gavel mr-2"></i>
                                        Place Bid
                                    </button>
                                </form>
                            }
                            else if (isSeller)
                            {
                            }
                            else
                            {
                                <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" class="w-full bg-purple-600 text-white py-2 px-3 rounded-lg hover:bg-purple-700 transition flex items-center justify-center inline-block text-center">
                                    <i class="fas fa-gavel mr-2"></i>
                                    Place Bid
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <!-- Products Grid - Borrow Products (hidden initially) -->
        <div id="borrowProducts" class="tab-content hidden">
            <div id="borrowProductsGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                @foreach (var item in Model.BorrowProducts)
                {
                    <div class="product-item bg-white rounded-lg shadow-sm overflow-hidden transition-transform hover:shadow-md border border-gray-200"
                         data-price="@item.DailyRate" 
                         data-category="@(item.Category?.Id ?? 0)" 
                         data-condition="@(item.Condition?.Id ?? 0)"
                         data-title="@item.Title.ToLower()"
                         data-seller="@(item.Seller?.Username?.ToLower() ?? "")">
                        <a href="@Url.Action("Details", "BorrowProducts", new { id = item.Id })" class="block">
                            <div class="h-48 bg-gradient-to-r from-green-50 to-purple-50 flex items-center justify-center">
                                @if (item.Images != null && item.Images.Any())
                                {
                                    <img src="@item.Images.First().Url" alt="@item.Title" class="h-full w-full object-cover">
                                }
                                else
                                {
                                    <div class="text-gray-400 text-lg">No Image</div>
                                }
                            </div>
                            <div class="p-4">
                                <h2 class="text-xl font-semibold">@item.Title</h2>
                                <p class="text-gray-600 mb-1">@(item.Category?.Name ?? "Uncategorized")</p>
                                
                                @if (!string.IsNullOrEmpty(item.Description) && item.Description.Length > 50)
                                {
                                    <p class="text-gray-700 text-sm mb-3">@(item.Description.Substring(0, 50))...</p>
                                }
                                else
                                {
                                    <p class="text-gray-700 text-sm mb-3">@(item.Description ?? "No description")</p>
                                }
                                
                                <div class="flex justify-between items-center mb-3">
                                    <span class="text-green-600 font-bold text-xl">$@item.DailyRate.ToString("N2")</span>
                                    <span class="text-gray-600 text-sm">Per Day</span>
                                </div>
                                
                                <div class="text-orange-600 font-medium mb-3">
                                    Status: 
                                    @if (item.IsBorrowed)
                                    {
                                        <span class="text-red-600">Currently Borrowed</span>
                                    }
                                    else
                                    {
                                        <span class="text-green-600">Available</span>
                                    }
                                </div>
                                
                                <div class="text-gray-600 font-medium mb-3">
                                    @{
                                        var availability = "";
                                        if (item.StartDate.HasValue && item.EndDate.HasValue)
                                        {
                                            availability = $"Available: {item.StartDate.Value.ToShortDateString()} - {item.EndDate.Value.ToShortDateString()}";
                                        }
                                        else if (item.EndDate.HasValue)
                                        {
                                            availability = $"Available until: {item.EndDate.Value.ToShortDateString()}";
                                        }
                                        else
                                        {
                                            availability = "No availability information";
                                        }
                                    }
                                    @availability
                                </div>
                            </div>
                        </a>
                        <div class="px-4 pb-4">
                            @if (User.Identity.IsAuthenticated && canPurchase)
                            {
                                <button class="w-full bg-green-600 text-white py-2 px-3 rounded-lg hover:bg-green-700 transition flex items-center justify-center">
                                    <i class="fas fa-calendar-alt mr-2"></i>
                                    Rent Now
                                </button>
                            }
                            else if (isSeller)
                            {
                            }
                            else
                            {
                                <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" class="w-full bg-green-600 text-white py-2 px-3 rounded-lg hover:bg-green-700 transition flex items-center justify-center inline-block text-center">
                                    <i class="fas fa-calendar-alt mr-2"></i>
                                    Rent Now
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <!-- Pagination Controls -->
        @if (ViewBag.TotalProducts != null && (int)ViewBag.TotalProducts > 0)
        {
            <div id="paginationContainer" class="mt-8 bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
                    <!-- Pagination Info (left side) -->
                    <div id="paginationInfo" class="text-sm text-gray-600 order-1 sm:order-none">
                        @{
                            int currentOffset = ViewBag.CurrentOffset ?? 0;
                            int currentCount = ViewBag.CurrentCount ?? 12;
                            int totalProducts = ViewBag.TotalProducts ?? 0;
                            int startItem = totalProducts > 0 ? currentOffset + 1 : 0;
                            int endItem = Math.Min(currentOffset + currentCount, totalProducts);
                        }
                        Showing @startItem to @endItem of @totalProducts products
                    </div>
                    
                    <!-- Pagination Navigation (center) -->
                    <div id="paginationNav" class="flex items-center gap-2 order-2 sm:order-none mx-auto">
                        @{
                            int currentPage = currentCount > 0 ? (currentOffset / currentCount) + 1 : 1;
                            int totalPages = currentCount > 0 ? (int)Math.Ceiling((double)totalProducts / currentCount) : 1;
                            string currentTab = ViewBag.CurrentTab ?? "buy";
                        }
                        
                        <!-- Previous Button -->
                        @if (ViewBag.PrevPageUrl != null)
                        {
                            <a href="@ViewBag.PrevPageUrl" 
                               class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors">
                                Previous
                            </a>
                        }
                        else
                        {
                            <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-200 rounded-md cursor-not-allowed">
                                Previous
                            </span>
                        }
                        
                        <!-- Page Numbers -->
                        @{
                            var pageUrls = ViewBag.PageUrls as Dictionary<int, string> ?? new Dictionary<int, string>();
                            int startPage = ViewBag.StartPage ?? 1;
                            int endPage = ViewBag.EndPage ?? 1;
                            bool showFirstPageEllipsis = ViewBag.ShowFirstPageEllipsis ?? false;
                            bool showLastPageEllipsis = ViewBag.ShowLastPageEllipsis ?? false;
                        }
                        
                        <!-- First page link if not in current range -->
                        @if (ViewBag.FirstPageUrl != null && startPage > 1)
                        {
                            <a href="@ViewBag.FirstPageUrl" 
                               class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors">
                                1
                            </a>
                            
                            @if (showFirstPageEllipsis)
                            {
                                <span class="px-2 py-2 text-sm text-gray-500">...</span>
                            }
                        }
                        
                        <!-- Current page range -->
                        @foreach (var pageUrl in pageUrls.OrderBy(p => p.Key))
                        {
                            if (pageUrl.Key == currentPage)
                            {
                                <span class="px-3 py-2 text-sm font-medium text-white bg-primary border border-primary rounded-md">
                                    @pageUrl.Key
                                </span>
                            }
                            else
                            {
                                <a href="@pageUrl.Value" 
                                   class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors">
                                    @pageUrl.Key
                                </a>
                            }
                        }
                        
                        <!-- Last page link if not in current range -->
                        @if (ViewBag.LastPageUrl != null && endPage < totalPages)
                        {
                            @if (showLastPageEllipsis)
                            {
                                <span class="px-2 py-2 text-sm text-gray-500">...</span>
                            }
                            
                            <a href="@ViewBag.LastPageUrl" 
                               class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors">
                                @ViewBag.LastPageNumber
                            </a>
                        }
                        
                        <!-- Next Button -->
                        @if (ViewBag.NextPageUrl != null)
                        {
                            <a href="@ViewBag.NextPageUrl" 
                               class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors">
                                Next
                            </a>
                        }
                        else
                        {
                            <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-200 rounded-md cursor-not-allowed">
                                Next
                            </span>
                        }
                    </div>
                    
                    <!-- Empty space for balance (right side) -->
                    <div class="hidden sm:block w-32"></div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let searchInput, categoryPills, conditionPills, priceRange, currentPriceValue;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Get current tab from ViewBag
            const currentTab = '@ViewBag.CurrentTab' || 'buy';
            
            // Initialize DOM elements
            searchInput = document.getElementById('searchInput');
            categoryPills = document.querySelectorAll('.category-pill');
            conditionPills = document.querySelectorAll('.condition-pill');
            priceRange = document.getElementById('priceRange');
            currentPriceValue = document.getElementById('currentPriceValue');
            const minPriceValue = document.getElementById('minPriceValue');
            const maxPriceValue = document.getElementById('maxPriceValue');
            
            // Initialize price range slider
            if (priceRange && currentPriceValue) {
                // Set initial value from ViewBag if available
                const selectedMaxPrice = @(ViewBag.SelectedMaxPrice ?? "null");
                if (selectedMaxPrice !== null) {
                    priceRange.value = selectedMaxPrice;
                    currentPriceValue.textContent = selectedMaxPrice;
                } else {
                    // Make sure the slider is at maximum by default
                    priceRange.value = priceRange.max;
                    currentPriceValue.textContent = priceRange.max;
                }
                
                // Update display values
                if (minPriceValue) {
                    minPriceValue.textContent = priceRange.min;
                }
                if (maxPriceValue) {
                    maxPriceValue.textContent = priceRange.max;
                }
                
                // Add event listeners for price range changes
                priceRange.addEventListener('input', function() {
                    currentPriceValue.textContent = this.value;
                });
                
                priceRange.addEventListener('change', function() {
                    updateClearFiltersButton();
                    applyFilters();
                });
            }
            
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            // Set initial active tab based on current tab parameter
            function setActiveTab(tabName) {
                // Deactivate all tabs
                tabButtons.forEach(btn => {
                    btn.classList.remove('active', 'text-white');
                    btn.classList.add('text-gray-700', 'bg-white', 'border-gray-300');
                    btn.classList.remove('bg-primary', 'bg-purple-600', 'bg-green-600', 'border-primary', 'border-purple-600', 'border-green-600');
                });
                
                // Hide all content
                tabContents.forEach(content => {
                    content.classList.add('hidden');
                });
                
                // Activate the specified tab
                const targetTab = document.getElementById(tabName + 'Tab');
                if (targetTab) {
                    targetTab.classList.add('active', 'text-white');
                    targetTab.classList.remove('text-gray-700', 'bg-white', 'border-gray-300');
                    
                    if (tabName === 'buy') {
                        targetTab.classList.add('bg-primary', 'border-primary');
                    } else if (tabName === 'auction') {
                        targetTab.classList.add('bg-purple-600', 'border-purple-600');
                    } else if (tabName === 'borrow') {
                        targetTab.classList.add('bg-green-600', 'border-green-600');
                    }
                    
                    // Show corresponding content
                    const contentId = tabName + 'Products';
                    const content = document.getElementById(contentId);
                    if (content) {
                        content.classList.remove('hidden');
                    }
                }
            }
            
            // Set initial tab
            setActiveTab(currentTab);
            
            // Tab switching with server-side navigation
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tabName = this.id.replace('Tab', '');
                    
                    // Get current filters to preserve them when switching tabs
                    const searchTerm = searchInput ? searchInput.value : '';
                    const selectedCategories = Array.from(categoryPills)
                        .filter(pill => pill.classList.contains('bg-primary'))
                        .map(pill => parseInt(pill.getAttribute('data-category-id')))
                        .filter(id => !isNaN(id));
                    const selectedConditions = Array.from(conditionPills)
                        .filter(pill => pill.classList.contains('bg-primary'))
                        .map(pill => parseInt(pill.getAttribute('data-condition-id')))
                        .filter(id => !isNaN(id));
                    const maxPrice = priceRange && parseInt(priceRange.value) < parseInt(priceRange.max) ? priceRange.value : null;
                    
                    // Build URL with current filters
                    const params = new URLSearchParams();
                    params.set('offset', '0');
                    params.set('count', '12');
                    params.set('tab', tabName);
                    
                    if (selectedConditions.length > 0) {
                        selectedConditions.forEach(id => params.append('conditionIds', id.toString()));
                    }
                    if (selectedCategories.length > 0) {
                        selectedCategories.forEach(id => params.append('categoryIds', id.toString()));
                    }
                    if (searchTerm) {
                        params.set('search', searchTerm);
                    }
                    if (maxPrice) {
                        params.set('maxPrice', maxPrice);
                    }
                    
                    // Navigate to the new tab with current filters
                    window.location.href = '@Url.Action("Index")?' + params.toString();
                });
            });
            
            // Mobile filter toggle
            const toggleFiltersBtn = document.getElementById('toggleFilters');
            const filterContent = document.getElementById('filterContent');
            
            if (toggleFiltersBtn && filterContent) {
                toggleFiltersBtn.addEventListener('click', function() {
                    filterContent.classList.toggle('hidden');
                    const icon = this.querySelector('i');
                    icon.classList.toggle('fa-chevron-down');
                    icon.classList.toggle('fa-chevron-up');
                });
                
                // Show filters by default on desktop, hide on mobile
                function handleResize() {
                    if (window.innerWidth < 768) {
                        filterContent.classList.add('hidden');
                    } else {
                        filterContent.classList.remove('hidden');
                    }
                }
                
                // Initial check and event listener for resize
                handleResize();
                window.addEventListener('resize', handleResize);
            }
            
            // Initialize selected filters from ViewBag
            const selectedConditionIds = @Html.Raw(Json.Serialize(ViewBag.SelectedConditionIds));
            const selectedCategoryIds = @Html.Raw(Json.Serialize(ViewBag.SelectedCategoryIds));
            
            // Set initial filter states
            categoryPills.forEach(pill => {
                const categoryId = parseInt(pill.getAttribute('data-category-id'));
                if (selectedCategoryIds.includes(categoryId)) {
                    pill.classList.add('bg-primary', 'text-white', 'border-primary');
                    pill.classList.remove('bg-gray-100', 'text-gray-700', 'border-gray-200');
                }
            });
            
            conditionPills.forEach(pill => {
                const conditionId = parseInt(pill.getAttribute('data-condition-id'));
                if (selectedConditionIds.includes(conditionId)) {
                    pill.classList.add('bg-primary', 'text-white', 'border-primary');
                    pill.classList.remove('bg-gray-100', 'text-gray-700', 'border-gray-200');
                }
            });
            
            // Search functionality - trigger on Enter key or search button click
            if (searchInput) {
                searchInput.value = '@ViewBag.SearchQuery';
            }
            
            // Category filters
            if (categoryPills && categoryPills.length > 0) {
                categoryPills.forEach(pill => {
                    pill.addEventListener('click', function() {
                        // Toggle active state
                        this.classList.toggle('bg-primary');
                        this.classList.toggle('text-white');
                        this.classList.toggle('border-primary');
                        this.classList.toggle('bg-gray-100');
                        this.classList.toggle('text-gray-700');
                        this.classList.toggle('border-gray-200');
                        
                        updateClearFiltersButton(); // Update button state immediately
                        applyFilters();
                    });
                });
            }
            
            // Condition filters
            if (conditionPills && conditionPills.length > 0) {
                conditionPills.forEach(pill => {
                    pill.addEventListener('click', function() {
                        // Toggle active state
                        this.classList.toggle('bg-primary');
                        this.classList.toggle('text-white');
                        this.classList.toggle('border-primary');
                        this.classList.toggle('bg-gray-100');
                        this.classList.toggle('text-gray-700');
                        this.classList.toggle('border-gray-200');
                        
                        updateClearFiltersButton(); // Update button state immediately
                        applyFilters();
                    });
                });
            }
            
            // Clear filters
            const clearFiltersBtn = document.getElementById('clearFilters');
            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function() {
                    // Reset search
                    if (searchInput) searchInput.value = '';
                    
                    // Reset price range
                    if (priceRange && currentPriceValue) {
                        priceRange.value = priceRange.max;
                        currentPriceValue.textContent = priceRange.max;
                    }
                    
                    // Reset all category pills
                    categoryPills.forEach(pill => {
                        pill.classList.remove('bg-primary', 'text-white', 'border-primary');
                        pill.classList.add('bg-gray-100', 'text-gray-700', 'border-gray-200');
                    });
                    
                    // Reset all condition pills
                    conditionPills.forEach(pill => {
                        pill.classList.remove('bg-primary', 'text-white', 'border-primary');
                        pill.classList.add('bg-gray-100', 'text-gray-700', 'border-gray-200');
                    });
                    
                    // Update button state immediately
                    updateClearFiltersButton();
                    
                    // Apply filters (show all)
                    applyFilters();
                });
            }
            
            // Update clear filters button state initially
            updateClearFiltersButton();
        });
        
        // Global functions
        function handleSearchKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                performSearch();
            }
        }
        
        function performSearch() {
            updateClearFiltersButton();
            applyFilters();
        }
        
        function updateClearFiltersButton() {
            const searchTerm = searchInput ? searchInput.value : '';
            
            // Get selected categories
            const selectedCategories = Array.from(categoryPills)
                .filter(pill => pill.classList.contains('bg-primary'))
                .map(pill => parseInt(pill.getAttribute('data-category-id')))
                .filter(id => !isNaN(id));
            
            // Get selected conditions
            const selectedConditions = Array.from(conditionPills)
                .filter(pill => pill.classList.contains('bg-primary'))
                .map(pill => parseInt(pill.getAttribute('data-condition-id')))
                .filter(id => !isNaN(id));
            
            // Check if price filter is active (not at maximum)
            const isPriceFiltered = priceRange && parseInt(priceRange.value) < parseInt(priceRange.max);
            
            // Check if any filters are active
            const hasActiveFilters = searchTerm || selectedCategories.length > 0 || selectedConditions.length > 0 || isPriceFiltered;
            
            // Update clear filters button state
            const clearFiltersBtn = document.getElementById('clearFilters');
            if (clearFiltersBtn) {
                if (hasActiveFilters) {
                    clearFiltersBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    clearFiltersBtn.disabled = false;
                } else {
                    clearFiltersBtn.classList.add('opacity-50', 'cursor-not-allowed');
                    clearFiltersBtn.disabled = true;
                }
            }
        }

        function applyFilters(resetOffset = true) {
            try {
                const activeTab = document.querySelector('.tab-btn.active');
                if (!activeTab) {
                    console.error('No active tab found');
                    return;
                }
                
                const tabName = activeTab.id.replace('Tab', '');
                const searchTerm = searchInput ? searchInput.value : '';
                
                // Get selected categories
                const selectedCategories = Array.from(categoryPills)
                    .filter(pill => pill.classList.contains('bg-primary'))
                    .map(pill => parseInt(pill.getAttribute('data-category-id')))
                    .filter(id => !isNaN(id));
                
                // Get selected conditions
                const selectedConditions = Array.from(conditionPills)
                    .filter(pill => pill.classList.contains('bg-primary'))
                    .map(pill => parseInt(pill.getAttribute('data-condition-id')))
                    .filter(id => !isNaN(id));
                
                // Get price filter
                const maxPrice = priceRange && parseInt(priceRange.value) < parseInt(priceRange.max) ? priceRange.value : null;
                
                // Update clear filters button state
                updateClearFiltersButton();
                
                // Build URL with filters for navigation
                const currentOffset = resetOffset ? 0 : (@ViewBag.CurrentOffset ?? 0);
                const params = new URLSearchParams();
                params.set('offset', currentOffset.toString());
                params.set('count', '12');
                params.set('tab', tabName);
                
                if (selectedConditions.length > 0) {
                    selectedConditions.forEach(id => params.append('conditionIds', id.toString()));
                }
                if (selectedCategories.length > 0) {
                    selectedCategories.forEach(id => params.append('categoryIds', id.toString()));
                }
                if (searchTerm) {
                    params.set('search', searchTerm);
                }
                if (maxPrice) {
                    params.set('maxPrice', maxPrice);
                }
                
                console.log('Applying filters:', {
                    tab: tabName,
                    search: searchTerm,
                    categories: selectedCategories,
                    conditions: selectedConditions,
                    maxPrice: maxPrice
                });
                
                // Navigate to filtered results
                window.location.href = '@Url.Action("Index")?' + params.toString();
                
            } catch (error) {
                console.error('Error applying filters:', error);
            }
        }
    </script>
}

<style>
    .pb-3\/4 {
        padding-bottom: 75%;
    }
    
    /* Custom styling for range slider */
    input[type=range] {
        height: 6px;
        border-radius: 5px;
    }
    
    input[type=range]::-webkit-slider-thumb {
        height: 16px;
        width: 16px;
        border-radius: 50%;
    }
</style> 