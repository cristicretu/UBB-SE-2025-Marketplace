@model MarketMinds.Shared.Models.Product
@using MarketMinds.Shared.Services.ProductCategoryService
@using MarketMinds.Shared.Services.ProductTagService
@using MarketMinds.Shared.Services.ProductConditionService
@using MarketMinds.Shared.Services.ImagineUploadService
@using MarketMinds.Shared.Models
@inject IProductCategoryService CategoryService
@inject IProductTagService TagService
@inject IProductConditionService ConditionService
@inject IImageUploadService ImageUploadService

@{
    ViewData["Title"] = "Create a Listing";
    var categories = CategoryService.GetAllProductCategories();
    var conditions = ConditionService.GetAllProductConditions();
    var allTags = TagService.GetAllProductTags();
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header Section -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900 mb-2">Create a Listing</h1>
            <p class="text-lg text-gray-600">Sell, auction, or lend your items to the community</p>
        </div>

        <!-- Main Form Card -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <form asp-action="Create" method="post" id="listingForm" enctype="multipart/form-data"
                onsubmit="console.log('Form onsubmit triggered for action: ' + this.action);">
                <div class="p-8 space-y-8">
                    
                    <div asp-validation-summary="ModelOnly" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg"></div>

                    <!-- Product Type Selection -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                            </svg>
                            Listing Type
                        </h2>
                        <p class="text-gray-600">Choose how you want to offer your item</p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <!-- Auction Option -->
                            <label class="relative cursor-pointer">
                                <input type="radio" name="productType" id="productType" value="auction" checked class="sr-only peer">
                                <div class="p-6 border-2 border-gray-200 rounded-lg peer-checked:border-blue-500 peer-checked:bg-blue-50 hover:border-gray-300 transition-all">
                                    <div class="text-center">
                                        <svg class="w-8 h-8 mx-auto mb-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                                        </svg>
                                        <h3 class="font-semibold text-gray-900">Auction</h3>
                                        <p class="text-sm text-gray-500 mt-1">Let buyers bid on your item</p>
                                    </div>
                                </div>
                            </label>

                            <!-- Buy Option -->
                            <label class="relative cursor-pointer">
                                <input type="radio" name="productType" value="buy" class="sr-only peer">
                                <div class="p-6 border-2 border-gray-200 rounded-lg peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-gray-300 transition-all">
                                    <div class="text-center">
                                        <svg class="w-8 h-8 mx-auto mb-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                                        </svg>
                                        <h3 class="font-semibold text-gray-900">Sell</h3>
                                        <p class="text-sm text-gray-500 mt-1">Set a fixed price to sell</p>
                                    </div>
                                </div>
                            </label>

                            <!-- Borrow Option -->
                            <label class="relative cursor-pointer">
                                <input type="radio" name="productType" value="borrow" class="sr-only peer">
                                <div class="p-6 border-2 border-gray-200 rounded-lg peer-checked:border-purple-500 peer-checked:bg-purple-50 hover:border-gray-300 transition-all">
                                    <div class="text-center">
                                        <svg class="w-8 h-8 mx-auto mb-3 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
                                        </svg>
                                        <h3 class="font-semibold text-gray-900">Lend</h3>
                                        <p class="text-sm text-gray-500 mt-1">Rent out your item daily</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Basic Information -->
                    <div class="space-y-6">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Basic Information
                        </h2>

                        <!-- Title -->
                        <div>
                            <label asp-for="Title" class="block text-sm font-medium text-gray-700 mb-2">Title *</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                    </svg>
                                </div>
                                <input asp-for="Title"
                                    class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                                    placeholder="What are you offering?"
                                    required />
                            </div>
                            <span asp-validation-for="Title" class="text-red-500 text-sm mt-1 block"></span>
                        </div>

                        <!-- Category and Condition Grid -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Category -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                        </svg>
                                    </div>
                                    <select asp-for="CategoryId"
                                        class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors appearance-none bg-white"
                                        required>
                                        <option value="">Choose a category</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </select>
                                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </div>
                                </div>
                                <span asp-validation-for="CategoryId" class="text-red-500 text-sm mt-1 block"></span>
                            </div>

                            <!-- Condition -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Condition *</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    </div>
                                    <select asp-for="ConditionId"
                                        class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors appearance-none bg-white"
                                        required>
                                        <option value="">Select condition</option>
                                        @foreach (var condition in conditions)
                                        {
                                            <option value="@condition.Id">@condition.Name</option>
                                        }
                                    </select>
                                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </div>
                                </div>
                                <span asp-validation-for="ConditionId" class="text-red-500 text-sm mt-1 block"></span>
                            </div>
                        </div>

                        <!-- Description -->
                        <div>
                            <label asp-for="Description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea asp-for="Description"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors resize-none"
                                rows="4"
                                placeholder="Describe your item in detail..."></textarea>
                            <span asp-validation-for="Description" class="text-red-500 text-sm mt-1 block"></span>
                        </div>
                    </div>

                    <!-- Images Section -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            Photos
                        </h2>
                        <p class="text-gray-600">Add photos to showcase your item (automatically uploaded)</p>
                        
                        <!-- File Upload Area -->
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors cursor-pointer" id="uploadArea">
                            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                            </svg>
                            <div class="text-sm text-gray-600">
                                <label for="imageUpload" class="font-medium text-blue-600 hover:text-blue-500 cursor-pointer">
                                    Click to upload
                                </label>
                                <span> or drag and drop</span>
                            </div>
                            <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                            <input type="file" id="imageUpload" accept="image/*" multiple class="hidden" />
                        </div>

                        <!-- Upload Status -->
                        <div id="uploadStatus" class="hidden"></div>

                        <!-- Image Preview Container -->
                        <div id="imagePreviewContainer" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"></div>
                        <input type="hidden" id="imageUrls" name="imageUrls" />
                    </div>

                    <!-- Tags Section -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                            </svg>
                            Tags
                        </h2>
                        <p class="text-gray-600">Add tags to help buyers find your item</p>

                        <div class="flex items-center space-x-2">
                            <div class="relative flex-1">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                    </svg>
                                </div>
                                <input type="text" id="tagInput"
                                    class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                                    placeholder="Type a tag and press Enter" />
                            </div>
                            <button type="button" id="addTagBtn"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add
                            </button>
                        </div>

                        <!-- Selected Tags -->
                        <div id="selectedTags" class="flex flex-wrap gap-2"></div>
                        <input type="hidden" id="tagIds" name="tagIds" />
                    </div>

                    <!-- Pricing Section -->
                    <div class="space-y-6">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                            <span id="pricingSectionTitle">Pricing & Auction Details</span>
                        </h2>

                        <!-- Auction Fields -->
                        <div class="auction-field space-y-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Starting Price *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <span class="text-gray-500">€</span>
                                        </div>
                                        <input name="StartPrice" id="StartPrice" type="number" step="0.01" min="0.01"
                                            value="@((Model as AuctionProduct)?.StartPrice ?? 0)"
                                            class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                                            placeholder="0.00"
                                            required />
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Auction End Date *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                        </div>
                                        <input name="EndTime" id="EndTime" type="datetime-local"
                                            value="@((Model as AuctionProduct)?.EndTime.ToString("yyyy-MM-ddTHH:mm") ?? "")"
                                            class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                                            required />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Buy Fields -->
                        <div class="buy-field space-y-4" style="display: none;">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Price *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <span class="text-gray-500">€</span>
                                        </div>
                                        <input name="Price" id="Price" type="number" min="0.01" step="0.01"
                                            class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition-colors"
                                            placeholder="0.00"
                                            required />
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Stock Quantity *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                            </svg>
                                        </div>
                                        <input name="Stock" id="Stock" type="number" min="1" value="1"
                                            class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition-colors"
                                            placeholder="1"
                                            required />
                                    </div>
                                    <p class="text-sm text-gray-500 mt-1">Number of items available</p>
                                </div>
                            </div>
                        </div>

                        <!-- Borrow Fields -->
                        <div class="borrow-field space-y-4" style="display: none;">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Available From *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                        </div>
                                        <input name="StartDate" id="AvailableFrom" type="datetime-local"
                                            class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                                            required />
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Available To *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                        </div>
                                        <input name="EndDate" id="AvailableTo" type="datetime-local"
                                            class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                                            required />
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Daily Rate *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <span class="text-gray-500">€</span>
                                        </div>
                                        <input name="DailyRate" id="DailyRate" type="number" step="0.01" min="0.01"
                                            class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors"
                                            placeholder="0.00"
                                            required />
                                    </div>
                                    <p class="text-sm text-gray-500 mt-1">Price per day</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Hidden Fields -->
                    <input type="hidden" name="TimeLimit" id="TimeLimit" />
                    <input type="hidden" name="IsBorrowed" id="IsBorrowed" value="false" />
                    <input type="hidden" name="IsSold" id="IsSold" value="false" />
                    <input type="hidden" name="StartTime" value="@((Model as AuctionProduct)?.StartTime.ToString("yyyy-MM-ddTHH:mm:ss") ?? DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"))" />
                    <input type="hidden" asp-for="SellerId" value="1" />
                    <input type="hidden" name="CurrentPrice" id="CurrentPrice" value="@((Model as AuctionProduct)?.CurrentPrice ?? 0)" />

                </div>

                <!-- Submit Section -->
                <div class="bg-gray-50 px-8 py-6 border-t border-gray-200">
                    <div class="flex flex-col sm:flex-row items-center justify-between space-y-3 sm:space-y-0 sm:space-x-4">
                        <!-- Action Buttons -->
                        <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 w-full sm:w-auto">
                            <!-- Auction Button -->
                            <button type="button" id="auctionSubmitBtn"
                                class="auction-field w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center shadow-sm">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                                </svg>
                                Create Auction
                            </button>

                            <!-- Buy Button -->
                            <button type="button" id="buySubmitBtn"
                                class="buy-field w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center shadow-sm"
                                style="display: none;">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                                </svg>
                                Create Listing
                            </button>

                            <!-- Borrow Button -->
                            <button type="button" id="borrowSubmitBtn"
                                class="borrow-field w-full sm:w-auto bg-purple-600 hover:bg-purple-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center shadow-sm"
                                style="display: none;">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
                                </svg>
                                Create Rental
                            </button>
                        </div>

                        <!-- Cancel Button -->
                        <a asp-controller="Home" asp-action="Index"
                            class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 border border-gray-300 text-gray-700 bg-white rounded-lg hover:bg-gray-50 transition-colors font-medium">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                            </svg>
                            Cancel
                        </a>
                    </div>
                </div>

            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize form elements
            const productTypeRadios = document.querySelectorAll('input[name="productType"]');
            const form = document.getElementById('listingForm');
            const pricingSectionTitle = document.getElementById('pricingSectionTitle');

            // Set default end date for auction
            const endDateInput = document.getElementById('EndTime');
            if (!endDateInput.value) {
                const endDate = new Date();
                endDate.setDate(endDate.getDate() + 7);
                endDateInput.value = endDate.toISOString().slice(0, 16);
            }

            // Set current price equal to start price
            const startPriceInput = document.getElementById('StartPrice');
            const currentPriceInput = document.getElementById('CurrentPrice');

            startPriceInput.addEventListener('change', function () {
                currentPriceInput.value = this.value;
            });

            currentPriceInput.value = startPriceInput.value || 0;

            // Handle product type changes
            productTypeRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    updateFormBasedOnType(this.value);
                });
            });

            // Initialize with default selection
            const checkedRadio = document.querySelector('input[name="productType"]:checked');
            updateFormBasedOnType(checkedRadio.value);

            function updateFormBasedOnType(productType) {
                switch (productType) {
                    case 'auction':
                        form.action = '@Url.Action("Create", "Home")';
                        pricingSectionTitle.textContent = 'Pricing & Auction Details';
                        showAuctionFields(true);
                        showBorrowFields(false);
                        showBuyFields(false);
                        break;
                    case 'buy':
                        form.action = '@Url.Action("CreateBuyProduct", "Home")';
                        pricingSectionTitle.textContent = 'Pricing & Stock';
                        showAuctionFields(false);
                        showBorrowFields(false);
                        showBuyFields(true);
                        break;
                    case 'borrow':
                        form.action = '@Url.Action("CreateBorrowProduct", "Home")';
                        pricingSectionTitle.textContent = 'Rental Details';
                        showAuctionFields(false);
                        showBorrowFields(true);
                        showBuyFields(false);
                        setDefaultBorrowDates();
                        break;
                }
                console.log("Form action updated to:", form.action);
            }

            function showAuctionFields(show) {
                const auctionFields = document.querySelectorAll('.auction-field');
                auctionFields.forEach(field => {
                    field.style.display = show ? 'block' : 'none';
                    toggleRequiredAttributes(field, show);
                });
            }

            function showBorrowFields(show) {
                const borrowFields = document.querySelectorAll('.borrow-field');
                borrowFields.forEach(field => {
                    field.style.display = show ? 'block' : 'none';
                    toggleRequiredAttributes(field, show);
                });
            }

            function showBuyFields(show) {
                const buyFields = document.querySelectorAll('.buy-field');
                buyFields.forEach(field => {
                    field.style.display = show ? 'block' : 'none';
                    toggleRequiredAttributes(field, show);
                });
            }

            function toggleRequiredAttributes(fieldContainer, required) {
                const inputs = fieldContainer.querySelectorAll('input[required], select[required]');
                inputs.forEach(input => {
                    if (required) {
                        input.setAttribute('required', '');
                    } else {
                        input.removeAttribute('required');
                    }
                });
            }

            function setDefaultBorrowDates() {
                const availableFromInput = document.getElementById('AvailableFrom');
                const availableToInput = document.getElementById('AvailableTo');
                const timeLimitInput = document.getElementById('TimeLimit');

                if (!availableFromInput.value) {
                    const fromDate = new Date();
                    availableFromInput.value = fromDate.toISOString().slice(0, 16);
                }

                if (!availableToInput.value) {
                    const toDate = new Date();
                    toDate.setMonth(toDate.getMonth() + 1);
                    availableToInput.value = toDate.toISOString().slice(0, 16);
                }

                if (availableToInput.value) {
                    timeLimitInput.value = new Date(availableToInput.value).toISOString();
                } else {
                    const defaultEndDate = new Date();
                    defaultEndDate.setMonth(defaultEndDate.getMonth() + 1);
                    timeLimitInput.value = defaultEndDate.toISOString();
                }

                availableToInput.addEventListener('change', function() {
                    if (this.value) {
                        timeLimitInput.value = new Date(this.value).toISOString();
                    }
                });
            }

            // Submit button handlers
            document.getElementById('auctionSubmitBtn').addEventListener('click', function (e) {
                e.preventDefault();
                const auctionRadio = document.querySelector('input[value="auction"]');
                auctionRadio.checked = true;
                updateFormBasedOnType('auction');
                setTimeout(() => form.submit(), 50);
            });

            document.getElementById('borrowSubmitBtn').addEventListener('click', function (e) {
                e.preventDefault();
                const borrowRadio = document.querySelector('input[value="borrow"]');
                borrowRadio.checked = true;
                updateFormBasedOnType('borrow');

                const availableFrom = document.getElementById('AvailableFrom').value;
                const availableTo = document.getElementById('AvailableTo').value;
                const dailyRate = document.getElementById('DailyRate').value;

                if (!availableFrom || !availableTo || !dailyRate) {
                    alert('Please fill all required fields for rental listing');
                    return false;
                }

                document.getElementById('TimeLimit').value = new Date(availableTo).toISOString();
                setTimeout(() => form.submit(), 50);
            });

            document.getElementById('buySubmitBtn').addEventListener('click', function (e) {
                e.preventDefault();
                const buyRadio = document.querySelector('input[value="buy"]');
                buyRadio.checked = true;
                updateFormBasedOnType('buy');
                setTimeout(() => form.submit(), 50);
            });

            // ============== TAG HANDLING ==============
            const tagInput = document.getElementById('tagInput');
            const addTagBtn = document.getElementById('addTagBtn');
            const selectedTags = document.getElementById('selectedTags');
            const tagIdsInput = document.getElementById('tagIds');
            const selectedTagIds = [];
            const availableTags = @Html.Raw(Json.Serialize(allTags));

            tagInput.addEventListener('keydown', function (event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    event.stopPropagation();
                    handleAddTag();
                    return false;
                }
            });

            addTagBtn.addEventListener('click', function (event) {
                event.preventDefault();
                handleAddTag();
            });

            function handleAddTag() {
                const tagText = tagInput.value.trim();
                if (!tagText) return;

                let tagId, tagTitle, isNew = false;
                const existingTag = availableTags.find(tag =>
                    tag.Title && tag.Title.toLowerCase() === tagText.toLowerCase()
                );

                if (existingTag) {
                    tagId = existingTag.Id.toString();
                    tagTitle = existingTag.Title;
                } else {
                    tagId = 'new_' + tagText;
                    tagTitle = tagText;
                    isNew = true;
                }

                if (selectedTagIds.includes(tagId)) {
                    tagInput.value = '';
                    return;
                }

                selectedTagIds.push(tagId);
                tagIdsInput.value = selectedTagIds.join(',');

                const tagElement = document.createElement('div');
                tagElement.className = isNew ?
                    'inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium' :
                    'inline-flex items-center px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium';

                tagElement.innerHTML = `
                    <span>${tagTitle}</span>
                    <button type="button" class="ml-2 text-current hover:text-opacity-70 focus:outline-none" data-tag-id="${tagId}">
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                `;

                const removeBtn = tagElement.querySelector('button');
                removeBtn.addEventListener('click', function () {
                    const tagIdToRemove = this.getAttribute('data-tag-id');
                    const index = selectedTagIds.indexOf(tagIdToRemove);
                    if (index !== -1) {
                        selectedTagIds.splice(index, 1);
                        tagIdsInput.value = selectedTagIds.join(',');
                    }
                    tagElement.remove();
                });

                selectedTags.appendChild(tagElement);
                tagInput.value = '';
            }

            // ============== AUTOMATIC IMAGE UPLOAD ==============
            const imageUpload = document.getElementById('imageUpload');
            const uploadArea = document.getElementById('uploadArea');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const imageUrlsInput = document.getElementById('imageUrls');
            const uploadStatus = document.getElementById('uploadStatus');
            const uploadedUrls = [];

            // Drag and drop functionality
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('border-blue-400', 'bg-blue-50');
            });

            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
            });

            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFiles(files);
                }
            });

            // File input change handler - automatic upload
            imageUpload.addEventListener('change', function() {
                if (this.files && this.files.length > 0) {
                    handleFiles(this.files);
                }
            });

            async function handleFiles(files) {
                for (let i = 0; i < files.length; i++) {
                    await uploadFile(files[i]);
                }
            }

            async function uploadFile(file) {
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    showUploadStatus('error', 'Please select only image files');
                    return;
                }

                // Validate file size (10MB)
                if (file.size > 10 * 1024 * 1024) {
                    showUploadStatus('error', 'File size must be less than 10MB');
                    return;
                }

                showUploadStatus('uploading', `Uploading ${file.name}...`);

                const formData = new FormData();
                formData.append('image', file);

                try {
                    const response = await fetch('/api/Images/Upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('Failed to upload image');
                    }

                    const data = await response.json();
                    const imageUrl = data.url;

                    if (imageUrl) {
                        uploadedUrls.push(imageUrl);
                        createImagePreview(imageUrl);
                        updateImageUrlsInput();
                        showUploadStatus('success', `${file.name} uploaded successfully!`);
                        
                        // Clear the file input for next upload
                        imageUpload.value = '';
                    }
                } catch (error) {
                    console.error('Error uploading image:', error);
                    showUploadStatus('error', `Error uploading ${file.name}: ${error.message}`);
                }
            }

            function createImagePreview(imageUrl) {
                const imagePreview = document.createElement('div');
                imagePreview.className = 'relative group';
                imagePreview.innerHTML = `
                    <img src="${imageUrl}" alt="Uploaded image" class="w-full h-24 object-cover rounded-lg border border-gray-200" />
                    <button type="button" class="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity" aria-label="Remove image">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                `;

                imagePreview.querySelector('button').addEventListener('click', function () {
                    const index = uploadedUrls.indexOf(imageUrl);
                    if (index !== -1) {
                        uploadedUrls.splice(index, 1);
                        updateImageUrlsInput();
                    }
                    imagePreview.remove();
                });

                imagePreviewContainer.appendChild(imagePreview);
            }

            function updateImageUrlsInput() {
                imageUrlsInput.value = uploadedUrls.join('\n');
            }

            function showUploadStatus(type, message) {
                uploadStatus.classList.remove('hidden');
                let className = '';
                let icon = '';

                switch(type) {
                    case 'uploading':
                        className = 'bg-blue-50 border border-blue-200 text-blue-700';
                        icon = '<div class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500"><svg class="w-5 h-5" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></div>';
                        break;
                    case 'success':
                        className = 'bg-green-50 border border-green-200 text-green-700';
                        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
                        break;
                    case 'error':
                        className = 'bg-red-50 border border-red-200 text-red-700';
                        icon = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
                        break;
                }

                uploadStatus.innerHTML = `
                    <div class="px-4 py-3 rounded-lg ${className} flex items-center">
                        ${icon}
                        <span>${message}</span>
                    </div>
                `;

                // Auto-hide success messages after 3 seconds
                if (type === 'success') {
                    setTimeout(() => {
                        uploadStatus.classList.add('hidden');
                    }, 3000);
                }
            }
        });
    </script>
}