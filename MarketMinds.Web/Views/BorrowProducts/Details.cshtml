@model MarketMinds.Shared.Models.BorrowProduct
@using MarketMinds.Shared.Services

@{
    ViewData["Title"] = $"Borrow Details: {Model.Title}";
    var isAvailable = !Model.IsBorrowed;
    var remainingTime = "";
    
    if (Model.EndDate.HasValue)
    {
        var timeLeft = Model.EndDate.Value - DateTime.Now;
        if (timeLeft <= TimeSpan.Zero)
        {
            remainingTime = "Borrowing period ended";
        }
        else
        {
            remainingTime = $"{timeLeft.Days}d {timeLeft.Hours}h {timeLeft.Minutes}m";
        }
    }
    else
    {
        remainingTime = "No end date specified";
    }
    
    // Add user role check similar to BuyProducts Details
    bool isAuthenticated = User.Identity?.IsAuthenticated == true && UserSession.CurrentUserId.HasValue;
    
    int userType = 0;
    if (isAuthenticated && !string.IsNullOrEmpty(UserSession.CurrentUserRole))
    {
        if (int.TryParse(UserSession.CurrentUserRole, out int parsedType))
        {
            userType = parsedType;
        }
        else
        {
            switch (UserSession.CurrentUserRole)
            {
                case "Admin": userType = 1; break;
                case "Buyer": userType = 2; break;
                case "Seller": userType = 3; break;
                default: userType = 0; break;
            }
        }
    }
    
    bool isAdmin = isAuthenticated && userType == 1;
    bool isBuyer = isAuthenticated && userType == 2;
    bool isSeller = isAuthenticated && userType == 3;
    
    // Check if user can make purchases (admins and buyers)
    bool canPurchase = isAdmin || isBuyer;
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-6 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">@TempData["SuccessMessage"]</span>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">@TempData["ErrorMessage"]</span>
            </div>
        }

        <!-- Breadcrumb -->
        <nav class="mb-8">
            <div class="flex items-center space-x-2 text-sm text-gray-500">
                <a href="@Url.Action("Index", "Home")" class="hover:text-blue-600 transition-colors">Home</a>
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
                <span class="text-gray-700 font-medium">@Model.Title</span>
            </div>
        </nav>

        <!-- Main Product Section -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <div class="lg:flex">
                <!-- Product Images Section -->
                <div class="lg:w-1/2">
                    @if (Model.Images != null && Model.Images.Any())
                    {
                        <div class="relative bg-gray-100">
                            <div class="aspect-w-1 aspect-h-1 h-96 lg:h-[500px]">
                                <img id="mainImage" src="@Model.Images.First().Url" alt="@Model.Title"
                                    class="w-full h-full object-cover">
                            </div>
                            
                            <!-- Image indicator -->
                            @if (Model.Images.Count > 1)
                            {
                                <div class="absolute top-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm">
                                    <span id="imageCounter">1</span> / @Model.Images.Count
                                </div>
                            }
                        </div>

                        @if (Model.Images.Count > 1)
                        {
                            <div class="p-4 bg-white border-t border-gray-200">
                                <div class="flex space-x-3 overflow-x-auto pb-2">
                                    @for (int i = 0; i < Model.Images.Count; i++)
                                    {
                                        var img = Model.Images.ElementAt(i);
                                        <img src="@img.Url" alt="Product thumbnail"
                                            class="h-16 w-16 flex-shrink-0 object-cover rounded-lg cursor-pointer border-2 thumb-image @(i == 0 ? "border-blue-500" : "border-gray-200") hover:border-blue-400 transition-colors"
                                            onclick="setMainImage('@img.Url', @i)" data-index="@i">
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="h-96 lg:h-[500px] bg-gradient-to-br from-gray-100 via-gray-200 to-gray-300 flex items-center justify-center">
                            <div class="text-center">
                                <svg class="mx-auto h-16 w-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                <p class="text-gray-500 text-lg">No Image Available</p>
                            </div>
                        </div>
                    }

                    <!-- Borrowing Section (moved under photo) -->
                    <div class="p-6 border-t border-gray-200">
                        @if (canPurchase)
                        {
                            <div>
                                <h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                                    <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Borrow Product
                                </h3>
                                
                                @if (!Model.IsBorrowed)
                                {
                                    <!-- Product is available for borrowing -->
                                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                                        <div class="flex items-center mb-3">
                                            <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            <span class="text-green-700 font-medium">This product is available for borrowing!</span>
                                        </div>
                                        
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-2">Select Borrowing End Date:</label>
                                                <input type="date" id="borrowEndDate" 
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition-colors" 
                                                       min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" 
                                                       max="@Model.TimeLimit.ToString("yyyy-MM-dd")" />
                                            </div>
                                            
                                            <div class="flex items-center space-x-3">
                                                <button id="borrowButton" 
                                                        class="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center">
                                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                    </svg>
                                                    Borrow Product
                                                </button>
                                                <div id="borrowResult" class="text-gray-500 italic">Select an end date to borrow this product</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <!-- Product is currently borrowed -->
                                    <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                                        <div class="flex items-center mb-3">
                                            <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                            </svg>
                                            <span class="text-red-700 font-medium">This product is currently borrowed</span>
                                        </div>
                                        
                                        <div class="text-red-600 mb-3">
                                            @if (Model.EndDate.HasValue)
                                            {
                                                <p>Available again on: <strong>@Model.EndDate.Value.ToString("MMMM dd, yyyy")</strong></p>
                                                <p class="text-sm">Time remaining: @remainingTime</p>
                                            }
                                            else
                                            {
                                                <p>Return date not specified</p>
                                            }
                                        </div>
                                        
                                        <!-- Check if current user is the borrower -->
                                        @if (Model.BorrowerId == UserSession.CurrentUserId)
                                        {
                                            <div class="mt-4">
                                                <button id="returnButton" 
                                                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center">
                                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                                                    </svg>
                                                    Return Product
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-red-600 text-sm">Join the waitlist to be notified when this product becomes available.</p>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else if (isSeller)
                        {
                            <div>
                                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                                    <div class="flex items-center">
                                        <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                        </svg>
                                        <span class="text-yellow-700">Sellers cannot borrow products.</span>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>
                                <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" 
                                   class="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition-colors font-medium flex items-center justify-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Login to Borrow Product
                                </a>
                            </div>
                        }
                    </div>
                </div>

                <!-- Product Information Section -->
                <div class="lg:w-1/2 p-8">
                    <!-- Product Header -->
                    <div class="mb-6">
                        <div class="flex items-start justify-between mb-3">
                            <h1 class="text-3xl font-bold text-gray-900 leading-tight">@Model.Title</h1>
                            <span class="inline-flex items-center px-3 py-1 @(isAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") text-sm font-medium rounded-full">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                @(isAvailable ? "Available" : "Borrowed")
                            </span>
                        </div>
                        
                        <div class="flex items-center flex-wrap gap-x-4 gap-y-2 text-gray-600 mb-4">
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                </svg>
                                @(Model.Category?.Name ?? "Uncategorized")
                            </div>
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                @(Model.Condition?.Name ?? "Unknown")
                            </div>
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="@(Model.EndDate.HasValue && Model.EndDate.Value < DateTime.Now ? "text-red-600 font-medium" : "")">
                                    @remainingTime
                                </span>
                            </div>
                        </div>
                        
                        <div class="text-4xl font-bold text-green-600 mb-6">€@Model.DailyRate.ToString("0.00") <span class="text-lg font-normal text-gray-500">/ day</span></div>
                    </div>

                    <!-- Product Information Sections -->
                    <div class="space-y-6">
                        <!-- Description -->
                        <div>
                            <h3 class="text-xl font-semibold text-gray-900 mb-3 flex items-center">
                                <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Description
                            </h3>
                            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                                <p class="text-gray-700 leading-relaxed">@(Model.Description ?? "No description available for this product.")</p>
                            </div>
                        </div>

                        <!-- Seller Information -->
                        <div>
                            <h3 class="text-xl font-semibold text-gray-900 mb-3 flex items-center">
                                <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                Lender Information
                            </h3>
                            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                                <div class="flex items-center justify-between">
                                    <p class="text-gray-700 font-medium">@(Model.Seller?.Username ?? "Unknown seller")</p>
                                    @if (Model.Seller?.Id > 0 && canPurchase)
                                    {
                                        <a asp-controller="Reviews" asp-action="Create" asp-route-sellerId="@Model.Seller.Id" 
                                           class="inline-flex items-center px-3 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                                            </svg>
                                            Leave Review
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Waiting List Section (at bottom) -->
                        @if (canPurchase && Model.IsBorrowed)
                        {
                            <div>
                                <h3 class="text-xl font-semibold text-gray-900 mb-3 flex items-center">
                                    <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                                    </svg>
                                    Waiting List
                                </h3>
                                
                                <!-- Waitlist explanation -->
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                                    <div class="flex items-start">
                                        <svg class="w-5 h-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        <div class="text-blue-700">
                                            <p class="font-medium mb-1">How the waiting list works:</p>
                                            <ul class="text-sm space-y-1">
                                                <li>• Choose your desired borrowing end date and join the waitlist</li>
                                                <li>• When the product becomes available, it will be <strong>automatically assigned</strong> to the first person in line</li>
                                                <li>• Your borrowing will start when the current borrower's period ends</li>
                                                <li>• You'll get your chosen borrowing period (up to the product's time limit)</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Waitlist Join Form -->
                                <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
                                    <div class="space-y-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Choose your desired borrowing end date:</label>
                                            <input type="date" id="waitlistEndDate" 
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none transition-colors" 
                                                   min="@((Model.EndDate?.AddDays(1) ?? DateTime.Now.AddDays(1)).ToString("yyyy-MM-dd"))" 
                                                   max="@Model.TimeLimit.ToString("yyyy-MM-dd")" />
                                            <p class="text-xs text-gray-600 mt-1">
                                                Your borrowing will start when the current borrower returns the product 
                                                (currently scheduled for @(Model.EndDate?.ToString("yyyy-MM-dd") ?? "unknown date"))
                                            </p>
                                        </div>
                                        
                                        <div class="flex items-center space-x-3">
                                            <button id="joinWaitlistButton" 
                                                    class="flex-1 bg-orange-600 hover:bg-orange-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center">
                                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                                </svg>
                                                Join Waiting List
                                            </button>
                                            <div id="waitlistResult" class="text-gray-500 italic">Select an end date to join the waitlist</div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="flex space-x-3">
                                    <button id="leaveWaitlistButton" 
                                            class="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                        </svg>
                                        Leave Waitlist
                                    </button>
                                </div>
                                
                                <!-- Waitlist Position Display -->
                                <div id="waitlistPosition" class="mt-4 text-center text-gray-600 italic">
                                    Checking your position in the waitlist...
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Back Button -->
        <div class="mt-8 flex justify-center">
            <a href="javascript:history.back()"
                class="inline-flex items-center px-6 py-3 border border-gray-300 text-gray-700 bg-white rounded-lg hover:bg-gray-50 transition-colors font-medium">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Borrow Products
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function setMainImage(url, index) {
            document.getElementById('mainImage').src = url;
            document.getElementById('imageCounter').textContent = index + 1;
            
            // Update thumbnail borders
            document.querySelectorAll('.thumb-image').forEach((img, i) => {
                if (i === index) {
                    img.classList.remove('border-gray-200');
                    img.classList.add('border-blue-500');
                } else {
                    img.classList.remove('border-blue-500');
                    img.classList.add('border-gray-200');
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Borrowing functionality
            const borrowEndDateInput = document.getElementById('borrowEndDate');
            const borrowButton = document.getElementById('borrowButton');
            const borrowResult = document.getElementById('borrowResult');
            const returnButton = document.getElementById('returnButton');
            
            // Waitlist functionality
            const waitlistEndDateInput = document.getElementById('waitlistEndDate');
            const joinWaitlistButton = document.getElementById('joinWaitlistButton');
            const waitlistResult = document.getElementById('waitlistResult');
            const leaveWaitlistButton = document.getElementById('leaveWaitlistButton');
            
            // Handle borrow product
            if (borrowButton) {
                borrowButton.addEventListener('click', function() {
                    const endDate = borrowEndDateInput?.value;
                    
                    if (!endDate) {
                        borrowResult.textContent = 'Please select an end date first';
                        borrowResult.classList.remove('text-green-600', 'font-bold', 'text-gray-500', 'italic');
                        borrowResult.classList.add('text-red-500');
                        return;
                    }
                    
                    // Disable button and show loading
                    borrowButton.disabled = true;
                    borrowButton.innerHTML = '<svg class="w-5 h-5 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Processing...';
                    borrowResult.textContent = 'Processing your request...';
                    borrowResult.classList.remove('text-red-500', 'text-green-600', 'font-bold');
                    borrowResult.classList.add('text-blue-600', 'italic');
                    
                    // Call the controller method to borrow the product
                    const formData = new FormData();
                    formData.append('id', @Model.Id);
                    formData.append('endDate', endDate);
                    
                    fetch('@Url.Action("BorrowProduct", "BorrowProducts")', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            borrowResult.textContent = `Success! ${data.message} Total cost: ${data.totalPrice} for ${data.days} days.`;
                            borrowResult.classList.remove('text-red-500', 'text-blue-600', 'italic');
                            borrowResult.classList.add('text-green-600', 'font-bold');
                            
                            // Refresh the page after 2 seconds to show updated state
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        } else {
                            borrowResult.textContent = data.error;
                            borrowResult.classList.remove('text-green-600', 'font-bold', 'text-blue-600', 'italic');
                            borrowResult.classList.add('text-red-500');
                            
                            // Re-enable button
                            borrowButton.disabled = false;
                            borrowButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>Borrow Product';
                        }
                    })
                    .catch(error => {
                        borrowResult.textContent = 'Error processing request';
                        borrowResult.classList.remove('text-green-600', 'font-bold', 'text-blue-600', 'italic');
                        borrowResult.classList.add('text-red-500');
                        
                        // Re-enable button
                        borrowButton.disabled = false;
                        borrowButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>Borrow Product';
                    });
                });
            }
            
            // Handle return product
            if (returnButton) {
                returnButton.addEventListener('click', function() {
                    if (confirm('Are you sure you want to return this product?')) {
                        // Disable button and show loading
                        returnButton.disabled = true;
                        returnButton.innerHTML = '<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Returning...';
                        
                        // Use FormData instead of JSON to properly send the ID
                        const formData = new FormData();
                        formData.append('id', @Model.Id);
                        
                        fetch('@Url.Action("ReturnProduct", "BorrowProducts")', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert(data.message);
                                location.reload();
                            } else {
                                alert('Error: ' + data.error);
                                // Re-enable button
                                returnButton.disabled = false;
                                returnButton.innerHTML = '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 818 8v2M3 10l6 6m-6-6l6-6"></path></svg>Return Product';
                            }
                        })
                        .catch(error => {
                            alert('Error processing return request');
                            // Re-enable button
                            returnButton.disabled = false;
                            returnButton.innerHTML = '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 818 8v2M3 10l6 6m-6-6l6-6"></path></svg>Return Product';
                        });
                    }
                });
            }
            
            // Automatically process expired borrowings every 5 minutes
            setInterval(function() {
                fetch('@Url.Action("ProcessExpiredBorrowings", "BorrowProducts")', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.processedCount > 0) {
                        // Optionally refresh the page if the current product was affected
                        if (data.processedCount > 0) {
                            location.reload();
                        }
                    }
                })
                .catch(error => {
                    // Silent fail for background process
                });
            }, 300000); // 5 minutes = 300000 milliseconds
            
            // Check waitlist position if the product is borrowed and waitlist section exists
            const waitlistPositionDiv = document.getElementById('waitlistPosition');
            if (waitlistPositionDiv) {
                fetch('@Url.Action("GetWaitlistPosition", "BorrowProducts")?id=@Model.Id')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.position && data.position > 0) {
                        waitlistPositionDiv.innerHTML = `<div class="bg-orange-100 border border-orange-200 rounded-lg p-3"><div class="flex items-center justify-center"><svg class="w-4 h-4 text-orange-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span class="text-orange-700 font-medium">You are #${data.position} in the waitlist</span></div></div>`;
                    } else if (data.error) {
                        waitlistPositionDiv.innerHTML = `<span class="text-red-500">Error: ${data.error}</span>`;
                    } else {
                        waitlistPositionDiv.innerHTML = '<span class="text-gray-500">You are not currently in the waitlist for this product.</span>';
                    }
                })
                .catch(error => {
                    waitlistPositionDiv.innerHTML = `<span class="text-red-500">Unable to check waitlist position: ${error.message}</span>`;
                });
            }
            
            // Handle join waitlist
            if (joinWaitlistButton) {
                joinWaitlistButton.addEventListener('click', function() {
                    const endDate = waitlistEndDateInput?.value;
                    
                    if (!endDate) {
                        waitlistResult.textContent = 'Please select your desired end date first';
                        waitlistResult.classList.remove('text-green-600', 'font-bold', 'text-gray-500', 'italic');
                        waitlistResult.classList.add('text-red-500');
                        return;
                    }
                    
                    // Disable button and show loading
                    joinWaitlistButton.disabled = true;
                    joinWaitlistButton.innerHTML = '<svg class="w-5 h-5 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Joining...';
                    waitlistResult.textContent = 'Processing your request...';
                    waitlistResult.classList.remove('text-red-500', 'text-green-600', 'font-bold');
                    waitlistResult.classList.add('text-blue-600', 'italic');
                    
                    // Call the controller method to join waitlist with end date
                    const formData = new FormData();
                    formData.append('id', @Model.Id);
                    formData.append('endDate', endDate);
                    
                    fetch('@Url.Action("JoinWaitlist", "BorrowProducts")', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            waitlistResult.textContent = `Success! ${data.message}`;
                            waitlistResult.classList.remove('text-red-500', 'text-blue-600', 'italic');
                            waitlistResult.classList.add('text-green-600', 'font-bold');
                            
                            // Refresh the page after 2 seconds to show updated state
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        } else {
                            waitlistResult.textContent = data.error;
                            waitlistResult.classList.remove('text-green-600', 'font-bold', 'text-blue-600', 'italic');
                            waitlistResult.classList.add('text-red-500');
                            
                            // Re-enable button
                            joinWaitlistButton.disabled = false;
                            joinWaitlistButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>Join Waiting List';
                        }
                    })
                    .catch(error => {
                        waitlistResult.textContent = 'Error processing request: ' + error.message;
                        waitlistResult.classList.remove('text-green-600', 'font-bold', 'text-blue-600', 'italic');
                        waitlistResult.classList.add('text-red-500');
                        
                        // Re-enable button
                        joinWaitlistButton.disabled = false;
                        joinWaitlistButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>Join Waiting List';
                    });
                });
            }

            // Handle leave waitlist
            if (leaveWaitlistButton) {
                leaveWaitlistButton.addEventListener('click', function() {
                    if (confirm('Are you sure you want to leave the waitlist for this product?')) {
                        // Disable button and show loading
                        leaveWaitlistButton.disabled = true;
                        leaveWaitlistButton.innerHTML = '<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>Leaving...';
                        
                        // Call the controller method to leave waitlist
                        fetch('@Url.Action("LeaveWaitlist", "BorrowProducts")?id=@Model.Id', {
                            method: 'POST'
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                alert(data.message);
                                location.reload();
                            } else {
                                alert('Error: ' + data.error);
                                // Re-enable button
                                leaveWaitlistButton.disabled = false;
                                leaveWaitlistButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>Leave Waitlist';
                            }
                        })
                        .catch(error => {
                            alert('Error processing leave waitlist request');
                            // Re-enable button
                            leaveWaitlistButton.disabled = false;
                            leaveWaitlistButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>Leave Waitlist';
                        });
                    }
                });
            }
        });
    </script>
} 