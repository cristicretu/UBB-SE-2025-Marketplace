@model WebMarketplace.Models.BuyerProfileViewModel
@{
    ViewData["Title"] = ViewBag.CanEdit == true ? "Manage Buyer Profile" : $"{Model.FirstName} {Model.LastName} - Buyer Profile";
    // Get user ID from claims instead of UserSession to avoid null reference
    var UserId = User?.Identity?.IsAuthenticated == true ? 
        int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0") : 0;
    
    var canEdit = ViewBag.CanEdit == true;
    var isOwnProfile = ViewBag.IsOwnProfile == true;
}

<style>
    .profile-container {
        background: #f8f9fa;
        min-height: 100vh;
        padding: 2rem 0;
    }

    .profile-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 0;
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
        overflow: hidden;
        max-width: 1000px;
        margin: 0 auto;
    }

    .profile-header {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        padding: 2rem;
        text-align: center;
        position: relative;
    }

    .profile-title {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .profile-subtitle {
        opacity: 0.9;
        font-size: 1rem;
        margin-bottom: 0;
    }

    .badge-container {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        padding: 0.8rem 1.2rem;
        border-radius: 8px;
        text-align: center;
        min-width: 100px;
    }

    .badge-title {
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 0.2rem;
    }

    .badge-discount {
        font-size: 0.8rem;
        opacity: 0.9;
    }

    .profile-content {
        padding: 2rem;
    }

    .profile-picture-section {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid #e9ecef;
    }

    .profile-picture {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        font-weight: 600;
        margin-right: 1.5rem;
        position: relative;
    }

    .edit-picture-btn {
        position: absolute;
        bottom: -5px;
        right: -5px;
        background: #007bff;
        border: 2px solid white;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.8rem;
        cursor: pointer;
    }

    .profile-info {
        flex: 1;
    }

    .profile-name {
        font-size: 1.3rem;
        font-weight: 600;
        color: #343a40;
        margin-bottom: 0.2rem;
    }

    .profile-email {
        color: #6c757d;
        font-size: 0.95rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        display: block;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 0.75rem;
        font-size: 0.9rem;
        transition: all 0.2s ease;
        width: 100%;
    }

    .form-control:focus {
        border-color: #3B82F6;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
        outline: none;
    }

    .form-control[readonly] {
        background-color: #f8f9fa;
        border-color: #dee2e6;
        color: #6c757d;
    }

    .address-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .address-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .address-icon {
        width: 18px;
        height: 18px;
        color: #3B82F6;
    }

    .checkbox-container {
        background: white;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border: 1px solid #dee2e6;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        border: 2px solid #ced4da;
        border-radius: 4px;
        margin: 0;
    }

    .form-check-input:checked {
        background-color: #3B82F6;
        border-color: #3B82F6;
    }

    .form-check-label {
        font-weight: 500;
        color: #495057;
        font-size: 0.9rem;
        margin: 0;
        cursor: pointer;
    }

    .address-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .address-full-width {
        grid-column: 1 / -1;
    }

    .save-btn {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        border: none;
        border-radius: 6px;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 500;
        color: white;
        transition: all 0.2s ease;
        float: right;
        margin-top: 1rem;
        margin-bottom: 2rem;
    }

    .save-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .contract-actions {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        border: 1px solid #e9ecef;
        text-align: center;
        max-width: 1000px;
        margin: 0 auto;
    }

    .contract-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .contract-content {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
    }

    .action-btn {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 6px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
        color: white;
        text-decoration: none;
    }

    .generate-btn {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        padding: 0.8rem 1.2rem;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .generate-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
    }

    .public-profile {
        text-align: center;
        padding: 2rem;
    }

    .public-info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        max-width: 600px;
        margin: 0 auto;
    }

    .public-info-item {
        margin-bottom: 1rem;
    }

    .public-info-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        display: block;
    }

    .public-info-value {
        font-size: 1rem;
        color: #343a40;
        font-weight: 500;
        padding: 0.25rem 0;
        min-height: 20px;
    }

    .link-btn, .unlink-btn {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        border: none;
        border-radius: 6px;
        padding: 0.75rem 1.5rem;
        font-size: 0.9rem;
        font-weight: 500;
        color: white;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        cursor: pointer;
    }

    .link-btn:hover, .unlink-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        color: white;
        text-decoration: none;
    }

    .unlink-btn {
        background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
    }

    .unlink-btn:hover {
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    @@media (max-width: 768px) {
        .form-grid, .address-grid, .public-info-grid {
            grid-template-columns: 1fr;
        }
        
        .profile-picture-section {
            flex-direction: column;
            text-align: center;
        }
        
        .profile-picture {
            margin-right: 0;
            margin-bottom: 1rem;
        }
        
        .contract-content {
            flex-direction: column;
        }
        
        .save-btn {
            float: none;
            width: 100%;
        }
    }

    /* Links Section Styles */
    .links-header {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        padding: 1.5rem 2rem;
        margin: 0;
        border-radius: 12px 12px 0 0;
    }

    .links-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.8rem;
    }

    .link-count {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .links-content {
        padding: 2rem;
        margin: 0;
    }

    .linked-buyers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .linked-buyer-card {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .linked-buyer-card:hover {
        border-color: #17a2b8;
        box-shadow: 0 8px 25px rgba(23, 162, 184, 0.15);
        transform: translateY(-3px);
    }

    .linked-buyer-link {
        text-decoration: none;
        color: inherit;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .linked-buyer-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .linked-buyer-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 1rem;
        flex-shrink: 0;
    }

    .linked-buyer-info {
        flex: 1;
        min-width: 0;
    }

    .linked-buyer-name {
        font-weight: 600;
        font-size: 1.1rem;
        color: #343a40;
        margin-bottom: 0.3rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .linked-buyer-badge {
        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
        color: #212529;
        padding: 0.2rem 0.6rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-block;
        margin-bottom: 0.3rem;
    }

    .linked-buyer-email {
        color: #6c757d;
        font-size: 0.85rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Responsive design for Links */
    @@media (max-width: 768px) {
        .linked-buyers-grid {
            grid-template-columns: 1fr;
        }
        
        .links-header {
            padding: 1rem;
            margin: -2rem -1rem 1rem -1rem;
        }
        
        .links-content {
            padding: 0 1rem 1rem 1rem;
        }
    }

    /* Following Section Styles */
    .following-header {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        padding: 1.5rem 2rem;
        margin: 0;
        border-radius: 12px 12px 0 0;
    }

    .following-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.8rem;
    }

    .following-count {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .following-content {
        padding: 2rem;
        margin: 0;
    }

    .followed-sellers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .followed-seller-card {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .followed-seller-card:hover {
        border-color: #3B82F6;
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
        transform: translateY(-3px);
    }

    .followed-seller-link {
        text-decoration: none;
        color: inherit;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .followed-seller-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .followed-seller-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 1rem;
        flex-shrink: 0;
    }

    .followed-seller-info {
        flex: 1;
        min-width: 0;
    }

    .followed-seller-name {
        font-weight: 600;
        font-size: 1.1rem;
        color: #343a40;
        margin-bottom: 0.3rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .followed-seller-store {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        color: white;
        padding: 0.2rem 0.6rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-block;
        margin-bottom: 0.3rem;
    }

    .followed-seller-email {
        color: #6c757d;
        font-size: 0.85rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Responsive design for Following */
    @@media (max-width: 768px) {
        .followed-sellers-grid {
            grid-template-columns: 1fr;
        }
        
        .following-header {
            padding: 1rem;
            margin: -2rem -1rem 1rem -1rem;
        }
        
        .following-content {
            padding: 0 1rem 1rem 1rem;
        }
    }
</style>

<div class="profile-container">
    <div class="container">
        <div class="profile-card">
            <div class="profile-header">
                <h1 class="profile-title">@(canEdit ? "Edit Profile" : $"{Model.FirstName} {Model.LastName}")</h1>
                <p class="profile-subtitle">@(canEdit ? "Manage your profile information" : "")</p>
                @if (!string.IsNullOrEmpty(Model.Badge))
                {
                    <div class="badge-container">
                        <div class="badge-title">@Model.Badge</div>
                        @if (canEdit && Model.Discount > 0)
                        {
                            <div class="badge-discount">@(Model.Discount * 100)% Discount</div>
                        }
                    </div>
                }
            </div>

            <div class="profile-content">
                @if (canEdit)
                {
                    <form asp-action="Update" method="post">
                        <input type="hidden" asp-for="BuyerId" />

                        <!-- Personal Information Grid -->
                        <div class="form-grid">
                            <div class="form-group">
                                <label asp-for="FirstName" class="form-label">First Name</label>
                                <input asp-for="FirstName" class="form-control" />
                                <span asp-validation-for="FirstName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="LastName" class="form-label">Last Name</label>
                                <input asp-for="LastName" class="form-control" />
                                <span asp-validation-for="LastName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Email" class="form-label">Email</label>
                                <input asp-for="Email" class="form-control" readonly />
                            </div>
                            <div class="form-group">
                                <label asp-for="PhoneNumber" class="form-label">Phone Number</label>
                                <input asp-for="PhoneNumber" class="form-control" />
                                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Address Section -->
                        <div class="address-section">
                            <div class="address-title">
                                <svg class="address-icon" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                                </svg>
                                Address Information
                            </div>
                            
                            <!-- Billing Address -->
                            <h6 style="font-weight: 600; color: #495057; margin-bottom: 1rem;">Billing Address</h6>
                            <div class="address-grid">
                                <div class="form-group">
                                    <label asp-for="BillingStreet" class="form-label">Street Address</label>
                                    <input asp-for="BillingStreet" class="form-control" />
                                    <span asp-validation-for="BillingStreet" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="BillingPostalCode" class="form-label">Postal Code</label>
                                    <input asp-for="BillingPostalCode" class="form-control" />
                                    <span asp-validation-for="BillingPostalCode" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="BillingCity" class="form-label">City</label>
                                    <input asp-for="BillingCity" class="form-control" />
                                    <span asp-validation-for="BillingCity" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="BillingCountry" class="form-label">Country</label>
                                    <input asp-for="BillingCountry" class="form-control" />
                                    <span asp-validation-for="BillingCountry" class="text-danger"></span>
                                </div>
                            </div>

                            <!-- Same Address Checkbox -->
                            <div class="checkbox-container" style="margin-top: 1.5rem;">
                                <input asp-for="UseSameAddress" class="form-check-input" id="useSameAddress" />
                                <label class="form-check-label" for="useSameAddress">Use same address for shipping</label>
                            </div>

                            <!-- Shipping Address -->
                            <div id="shippingAddressFields">
                                <h6 style="font-weight: 600; color: #495057; margin-bottom: 1rem;">Shipping Address</h6>
                                <div class="address-grid">
                                    <div class="form-group">
                                        <label asp-for="ShippingStreet" class="form-label">Street Address</label>
                                        <input asp-for="ShippingStreet" class="form-control" />
                                        <span asp-validation-for="ShippingStreet" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="ShippingPostalCode" class="form-label">Postal Code</label>
                                        <input asp-for="ShippingPostalCode" class="form-control" />
                                        <span asp-validation-for="ShippingPostalCode" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="ShippingCity" class="form-label">City</label>
                                        <input asp-for="ShippingCity" class="form-control" />
                                        <span asp-validation-for="ShippingCity" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="ShippingCountry" class="form-label">Country</label>
                                        <input asp-for="ShippingCountry" class="form-control" />
                                        <span asp-validation-for="ShippingCountry" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Save Button -->
                        <button type="submit" class="save-btn">
                            Save Changes
                        </button>
                        <div class="clearfix"></div>
                    </form>
                }
                else
                {
                    <!-- Public Profile View -->
                    <div class="public-profile">
                        @{
                            var linkageInfo = ViewBag.LinkageInfo as MarketMinds.Shared.Services.BuyerLinkageInfo;
                        }
                        
                        @if (linkageInfo != null && linkageInfo.CanManageLink)
                        {
                            <!-- Link/Unlink Button -->
                            @if (linkageInfo.IsLinked)
                            {
                                <form asp-action="Unlink" method="post" style="margin-bottom: 1.5rem;">
                                    <input type="hidden" name="targetBuyerId" value="@Model.BuyerId" />
                                    <button type="submit" class="unlink-btn">
                                        <i class="fas fa-user-minus"></i> Unlink
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form asp-action="Link" method="post" style="margin-bottom: 1.5rem;">
                                    <input type="hidden" name="targetBuyerId" value="@Model.BuyerId" />
                                    <button type="submit" class="link-btn">
                                        <i class="fas fa-user-plus"></i> Link
                                    </button>
                                </form>
                            }
                        }
                        
                        <div class="public-info-grid">
                            <div class="public-info-item">
                                <label class="public-info-label">First Name</label>
                                <div class="public-info-value">@Model.FirstName</div>
                            </div>
                            <div class="public-info-item">
                                <label class="public-info-label">Last Name</label>
                                <div class="public-info-value">@Model.LastName</div>
                            </div>
                            <div class="public-info-item">
                                <label class="public-info-label">Email</label>
                                <div class="public-info-value">@Model.Email</div>
                            </div>
                            <div class="public-info-item">
                                <label class="public-info-label">Member Since</label>
                                <div class="public-info-value">@DateTime.Now.ToString("MMMM yyyy")</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Links Section -->
        @if (Model.LinkedBuyers != null && Model.LinkedBuyers.Any())
        {
            <div class="profile-card">
                <div class="links-header">
                    <h3 class="links-title">
                        <i class="fas fa-users"></i> Links
                        <span class="link-count">(@Model.LinkedBuyers.Count)</span>
                    </h3>
                </div>
                <div class="links-content">
                    <div class="linked-buyers-grid">
                        @foreach (var linkedBuyer in Model.LinkedBuyers)
                        {
                            <div class="linked-buyer-card">
                                <a href="@Url.Action("PublicProfile", "BuyerProfile", new { id = linkedBuyer.BuyerId })" class="linked-buyer-link">
                                    <div class="linked-buyer-avatar">
                                        @{
                                            var firstInitial = !string.IsNullOrEmpty(linkedBuyer.FirstName) ? linkedBuyer.FirstName.First().ToString().ToUpper() : "?";
                                            var lastInitial = !string.IsNullOrEmpty(linkedBuyer.LastName) ? linkedBuyer.LastName.First().ToString().ToUpper() : "";
                                        }
                                        @firstInitial@lastInitial
                                    </div>
                                    <div class="linked-buyer-info">
                                        <div class="linked-buyer-name">@linkedBuyer.FirstName @linkedBuyer.LastName</div>
                                        <div class="linked-buyer-badge">@linkedBuyer.Badge</div>
                                        @if (!string.IsNullOrEmpty(linkedBuyer.Email))
                                        {
                                            <div class="linked-buyer-email">@linkedBuyer.Email</div>
                                        }
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Following Section -->
        @if (Model.FollowingSellers != null && Model.FollowingSellers.Any())
        {
            <div class="profile-card">
                <div class="following-header">
                    <h3 class="following-title">
                        <i class="fas fa-store"></i> Following
                        <span class="following-count">(@Model.FollowingSellers.Count)</span>
                    </h3>
                </div>
                <div class="following-content">
                    <div class="followed-sellers-grid">
                        @foreach (var followedSeller in Model.FollowingSellers)
                        {
                            <div class="followed-seller-card">
                                <a href="@Url.Action("PublicProfile", "SellerProfile", new { id = followedSeller.SellerId })" class="followed-seller-link">
                                    <div class="followed-seller-avatar">
                                        @{
                                            var firstInitial = !string.IsNullOrEmpty(followedSeller.FirstName) ? followedSeller.FirstName.First().ToString().ToUpper() : "?";
                                            var lastInitial = !string.IsNullOrEmpty(followedSeller.LastName) ? followedSeller.LastName.First().ToString().ToUpper() : "";
                                        }
                                        @firstInitial@lastInitial
                                    </div>
                                    <div class="followed-seller-info">
                                        <div class="followed-seller-name">@followedSeller.FirstName @followedSeller.LastName</div>
                                        @if (!string.IsNullOrEmpty(followedSeller.StoreName))
                                        {
                                            <div class="followed-seller-store">@followedSeller.StoreName</div>
                                        }
                                        @if (!string.IsNullOrEmpty(followedSeller.Email))
                                        {
                                            <div class="followed-seller-email">@followedSeller.Email</div>
                                        }
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        @if (canEdit)
        {
            <!-- Contract Actions -->
            <div class="contract-actions">
                <h3 class="contract-title">Contract Management</h3>
                
                <div class="contract-content">
                    <!-- Renew Contract -->
                    <a href="@Url.Action("Index", "RenewContract")" class="action-btn">Renew Contract</a>
                    
                    <!-- Generate Contract Form -->
                    <form asp-controller="Contract" asp-action="GenerateContract" method="post" style="display: flex; align-items: center; gap: 0.75rem;">
                        <label for="contractId" class="form-label" style="margin: 0; font-weight: 500;">Contract ID:</label>
                        <input type="number" class="form-control" id="contractId" name="contractId" required style="width: 120px; margin: 0;">
                        <button type="submit" class="generate-btn">Generate</button>
                    </form>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log("Document ready - initializing address logic");
            
            // Function to copy billing address to shipping address
            function copyBillingToShipping() {
                console.log("copyBillingToShipping called");
                
                var billingStreet = $("#BillingStreet").val();
                var billingCity = $("#BillingCity").val();
                var billingCountry = $("#BillingCountry").val();
                var billingPostalCode = $("#BillingPostalCode").val();
                
                console.log("Billing address values:", {
                    street: billingStreet,
                    city: billingCity,
                    country: billingCountry,
                    postalCode: billingPostalCode
                });
                
                $("#ShippingStreet").val(billingStreet);
                $("#ShippingCity").val(billingCity);
                $("#ShippingCountry").val(billingCountry);
                $("#ShippingPostalCode").val(billingPostalCode);
                
                console.log("Shipping address updated to:", {
                    street: $("#ShippingStreet").val(),
                    city: $("#ShippingCity").val(),
                    country: $("#ShippingCountry").val(),
                    postalCode: $("#ShippingPostalCode").val()
                });
            }

            // Function to toggle shipping address fields based on checkbox
            function toggleShippingFields() {
                var isChecked = $("#useSameAddress").is(":checked");
                console.log("toggleShippingFields called, checkbox checked:", isChecked);
                
                if (isChecked) {
                    console.log("Checkbox is checked - copying billing to shipping and hiding fields");
                    // Copy billing address to shipping address FIRST
                    copyBillingToShipping();
                    // Then hide the shipping address fields
                    $("#shippingAddressFields").slideUp(300);
                } else {
                    console.log("Checkbox is unchecked - showing shipping fields");
                    // Show the shipping address fields
                    $("#shippingAddressFields").slideDown(300);
                }
            }

            // Initial state setup
            console.log("Setting up initial state");
            var initialCheckState = $("#useSameAddress").is(":checked");
            console.log("Initial checkbox state:", initialCheckState);
            
            // Set initial state without animation
            if (initialCheckState) {
                copyBillingToShipping();
                $("#shippingAddressFields").hide();
            } else {
                $("#shippingAddressFields").show();
            }

            // Event handler for checkbox change
            $("#useSameAddress").change(function() {
                console.log("Checkbox changed!");
                toggleShippingFields();
            });

            // Event handler for billing address changes - copy to shipping if checkbox is checked
            $("#BillingStreet, #BillingCity, #BillingCountry, #BillingPostalCode").on('input change keyup', function() {
                var isChecked = $("#useSameAddress").is(":checked");
                var fieldId = $(this).attr('id');
                var fieldValue = $(this).val();
                
                console.log("Billing field changed:", fieldId, "=", fieldValue, "checkbox checked:", isChecked);
                
                if (isChecked) {
                    console.log("Checkbox is checked, copying billing changes to shipping");
                    copyBillingToShipping();
                }
            });

            // Before form submission - ensure data is properly set
            $('form[action*="Update"]').on('submit', function(e) {
                console.log("Profile form submission started");
                
                var isChecked = $("#useSameAddress").is(":checked");
                console.log("UseSameAddress checkbox:", isChecked);
                
                if (isChecked) {
                    console.log("Checkbox checked - ensuring shipping address matches billing");
                    copyBillingToShipping();
                }
                
                // Log all form values before submission
                console.log("Final form values before submission:");
                console.log("Billing Address:", {
                    street: $("#BillingStreet").val(),
                    city: $("#BillingCity").val(),
                    country: $("#BillingCountry").val(),
                    postalCode: $("#BillingPostalCode").val()
                });
                console.log("Shipping Address:", {
                    street: $("#ShippingStreet").val(),
                    city: $("#ShippingCity").val(),
                    country: $("#ShippingCountry").val(),
                    postalCode: $("#ShippingPostalCode").val()
                });
                console.log("UseSameAddress:", $("#useSameAddress").is(":checked"));
                
                console.log("Allowing form to submit normally...");
            });
            
            console.log("JavaScript initialization complete");
        });
    </script>
}
