@model IEnumerable<MarketMinds.Shared.Models.OrderDisplayInfo>
@{
    ViewData["Title"] = "Order History";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                <svg class="w-8 h-8 mr-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v6a2 2 0 002 2h2m5 0h2a2 2 0 002-2V9a2 2 0 00-2-2h-2m-5 4v6m5-6v6"></path>
                </svg>
                Order History
            </h1>
            <p class="text-gray-600 mt-2">Track and manage your past orders</p>
        </div>

        <!-- Filter Controls -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
            <div class="flex flex-col lg:flex-row lg:items-center gap-4">
                <div class="flex-1">
                    <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">Search Orders</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <input type="text" id="searchInput" 
                               class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                               placeholder="Search by product name, order ID, or category...">
                    </div>
                </div>
                <div class="lg:w-48">
                    <label for="timePeriodSelect" class="block text-sm font-medium text-gray-700 mb-2">Time Period</label>
                    <select id="timePeriodSelect" 
                            class="block w-full px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                        <option value="Last 3 Months">Last 3 Months</option>
                        <option value="Last 6 Months">Last 6 Months</option>
                        <option value="This Year">This Year</option>
                        <option value="all">All Orders</option>
                    </select>
                </div>
                <div class="lg:w-auto">
                    <label class="block text-sm font-medium text-gray-700 mb-2 lg:invisible">Refresh</label>
                    <button onclick="refreshOrders()" 
                            class="w-full lg:w-auto bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors shadow-sm flex items-center justify-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- No Results Message -->
        <div id="noResultsMessage" class="hidden bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
            <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6">
                <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v6a2 2 0 002 2h2m5 0h2a2 2 0 002-2V9a2 2 0 00-2-2h-2m-5 4v6m5-6v6"></path>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No orders found</h3>
            <p class="text-gray-600">No orders found matching your criteria</p>
        </div>

        <!-- Orders List -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <ul id="ordersList" class="divide-y divide-gray-200">
                @foreach (var order in Model)
                {
                    <li class="hover:bg-gray-50 transition-colors">
                        <div class="px-6 py-6">
                            <div class="flex items-center justify-between">
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-3 mb-3">
                                        <div class="flex-shrink-0 w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                                            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                                            </svg>
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <p class="text-lg font-semibold text-gray-900">
                                                Order #@order.OrderSummaryID
                                            </p>
                                            <p class="text-sm text-gray-500">
                                                @order.OrderDate
                                            </p>
                                        </div>
                                    </div>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                        <div>
                                            <p class="font-medium text-gray-700">Product</p>
                                            <p class="text-gray-600 truncate">@order.ProductName</p>
                                        </div>
                                        <div>
                                            <p class="font-medium text-gray-700">Category</p>
                                            <p class="text-gray-600">@order.ProductCategory</p>
                                        </div>
                                        <div>
                                            <p class="font-medium text-gray-700">Payment</p>
                                            <div class="flex items-center">
                                                @if (order.PaymentMethod?.ToLower() == "cash")
                                                {
                                                    <svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                                    </svg>
                                                }
                                                else if (order.PaymentMethod?.ToLower() == "card")
                                                {
                                                    <svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                                                    </svg>
                                                }
                                                <p class="text-gray-600">@order.PaymentMethod</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="ml-6 flex-shrink-0">
                                    <button onclick="showOrderDetails(@order.OrderSummaryID)" 
                                            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors shadow-sm flex items-center">
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                        View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div id="orderDetailsModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <!-- Modal Header -->
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <div class="flex items-center justify-between">
                    <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Order Details
                    </h3>
                    <button onclick="closeOrderDetailsModal()" class="text-gray-400 hover:text-gray-600 transition-colors">
                        <span class="sr-only">Close</span>
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            
            <!-- Modal Content -->
            <div class="px-6 py-6 overflow-y-auto max-h-[calc(90vh-80px)]" id="orderDetailsContent">
                <!-- Content will be loaded dynamically -->
                <div class="flex justify-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div id="successModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-medium text-gray-900">Success</h3>
                    <button onclick="closeSuccessModal()" class="text-gray-400 hover:text-gray-500">
                        <span class="sr-only">Close</span>
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="px-6 py-4">
                <div class="flex items-center justify-center mb-4">
                    <svg class="h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
                <p class="text-center text-gray-700" id="successMessage">Contract generated successfully!</p>
            </div>
            <div class="px-6 py-4 bg-gray-50 flex justify-end">
                <button onclick="closeSuccessModal()" 
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let searchTimeout;
        const searchInput = document.getElementById('searchInput');
        const timePeriodSelect = document.getElementById('timePeriodSelect');
        const ordersList = document.getElementById('ordersList');
        const noResultsMessage = document.getElementById('noResultsMessage');

        document.addEventListener('DOMContentLoaded', function() {
            loadOrders();
        });

        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                loadOrders();
            }, 300);
        });

        timePeriodSelect.addEventListener('change', loadOrders);

        function loadOrders() {
            const searchText = searchInput.value;
            const timePeriod = timePeriodSelect.value;

            // Show loading state
            ordersList.innerHTML = '<li class="px-6 py-8 text-center"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div></li>';
            noResultsMessage.classList.add('hidden');

            fetch(`/Order/GetFilteredOrders?searchText=${encodeURIComponent(searchText)}&timePeriod=${timePeriod}`)
                .then(response => response.json())
                .then(data => {
                    ordersList.innerHTML = '';
                    
                    if (!data.success) {
                        console.error('Error:', data.message);
                        noResultsMessage.querySelector('p').textContent = data.message;
                        noResultsMessage.classList.remove('hidden');
                        return;
                    }

                    if (data.orders.length === 0) {
                        noResultsMessage.querySelector('p').textContent = 'No orders found matching your criteria';
                        noResultsMessage.classList.remove('hidden');
                        return;
                    }

                    noResultsMessage.classList.add('hidden');
                    data.orders.forEach(order => {
                        const orderElement = createOrderElement(order);
                        ordersList.appendChild(orderElement);
                    });
                })
                .catch(error => {
                    console.error('Error loading orders:', error);
                    ordersList.innerHTML = '';
                    noResultsMessage.querySelector('p').textContent = 'Error loading orders. Please try again.';
                    noResultsMessage.classList.remove('hidden');
                });
        }

        function createOrderElement(order) {
            const li = document.createElement('li');
            li.className = 'hover:bg-gray-50 transition-colors';
            
            const paymentIcon = order.paymentMethod?.toLowerCase() === 'cash' ? 
                '<svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>' :
                order.paymentMethod?.toLowerCase() === 'card' ?
                '<svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path></svg>' : '';
            
            li.innerHTML = `
                <div class="px-6 py-6">
                    <div class="flex items-center justify-between">
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center space-x-3 mb-3">
                                <div class="flex-shrink-0 w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-lg font-semibold text-gray-900">
                                        Order #${order.orderSummaryID}
                                    </p>
                                    <p class="text-sm text-gray-500">
                                        ${order.orderDate}
                                    </p>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                <div>
                                    <p class="font-medium text-gray-700">Product</p>
                                    <p class="text-gray-600 truncate">${order.productName}</p>
                                </div>
                                <div>
                                    <p class="font-medium text-gray-700">Category</p>
                                    <p class="text-gray-600">${order.productCategory}</p>
                                </div>
                                <div>
                                    <p class="font-medium text-gray-700">Payment</p>
                                    <div class="flex items-center">
                                        ${paymentIcon}
                                        <p class="text-gray-600">${order.paymentMethod}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="ml-6 flex-shrink-0">
                            <button onclick="showOrderDetails(${order.orderSummaryID})" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors shadow-sm flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                                View Details
                            </button>
                        </div>
                    </div>
                </div>
            `;
            return li;
        }

        function refreshOrders() {
            loadOrders();
        }

        function showOrderDetails(orderId) {
            // Show loading state
            document.getElementById('orderDetailsContent').innerHTML = '<div class="flex justify-center py-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div></div>';
            document.getElementById('orderDetailsModal').classList.remove('hidden');

            $.ajax({
                url: '@Url.Action("GetOrderDetails", "Order")',
                type: 'GET',
                data: { orderId: orderId },
                success: function(response) {
                    if (response.success) {
                        const summary = response.summary;
                        console.log('OrderSummaryID for modal details (summary.id):', summary.id);
                        let content = `
                            <div class="space-y-8">
                                <!-- Order Summary -->
                                <div class="bg-gray-50 rounded-lg p-6">
                                    <h4 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3-4h.01M9 17h.01M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                                        </svg>
                                        Order Summary
                                    </h4>
                                    <div class="grid grid-cols-2 lg:grid-cols-3 gap-6">
                                        <div>
                                            <p class="text-sm font-medium text-gray-500">Order ID</p>
                                            <p class="mt-1 text-lg font-semibold text-gray-900">#${summary.id}</p>
                                        </div>
                                        <div>
                                            <p class="text-sm font-medium text-gray-500">Subtotal</p>
                                            <p class="mt-1 text-lg font-semibold text-gray-900">$${summary.subtotal.toFixed(2)}</p>
                                        </div>
                                        <div>
                                            <p class="text-sm font-medium text-gray-500">Warranty Tax</p>
                                            <p class="mt-1 text-lg font-semibold text-gray-900">$${summary.warrantyTax.toFixed(2)}</p>
                                        </div>
                                        <div>
                                            <p class="text-sm font-medium text-gray-500">Delivery Fee</p>
                                            <p class="mt-1 text-lg font-semibold text-gray-900">$${summary.deliveryFee.toFixed(2)}</p>
                                        </div>
                                        <div class="lg:col-span-2">
                                            <p class="text-sm font-medium text-gray-500">Total Amount</p>
                                            <p class="mt-1 text-2xl font-bold text-blue-600">$${summary.finalTotal.toFixed(2)}</p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Customer Information -->
                                <div>
                                    <h4 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                        </svg>
                                        Customer Information
                                    </h4>
                                    <div class="bg-white border border-gray-200 rounded-lg p-6">
                                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                            <div>
                                                <p class="text-sm font-medium text-gray-500">Full Name</p>
                                                <p class="mt-1 text-base text-gray-900">${summary.fullName || 'N/A'}</p>
                                            </div>
                                            <div>
                                                <p class="text-sm font-medium text-gray-500">Email</p>
                                                <p class="mt-1 text-base text-gray-900">${summary.email || 'N/A'}</p>
                                            </div>
                                            <div>
                                                <p class="text-sm font-medium text-gray-500">Phone Number</p>
                                                <p class="mt-1 text-base text-gray-900">${summary.phoneNumber || 'N/A'}</p>
                                            </div>
                                            <div>
                                                <p class="text-sm font-medium text-gray-500">Address</p>
                                                <p class="mt-1 text-base text-gray-900">${summary.address || 'N/A'}</p>
                                            </div>
                                            <div>
                                                <p class="text-sm font-medium text-gray-500">Postal Code</p>
                                                <p class="mt-1 text-base text-gray-900">${summary.postalCode || 'N/A'}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Additional Information -->
                                ${summary.additionalInfo ? `
                                <div>
                                    <h4 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                                        </svg>
                                        Additional Information
                                    </h4>
                                    <div class="bg-white border border-gray-200 rounded-lg p-6">
                                        <p class="text-base text-gray-900">${summary.additionalInfo}</p>
                                    </div>
                                    <div class="mt-4 space-x-4">
                                        <button onclick="generateContract(${summary.id})" 
                                                id="generateBtn_${summary.id}"
                                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                            Generate Contract
                                        </button>
                                        <button onclick="downloadContract(${summary.id})" 
                                                id="downloadBtn_${summary.id}"
                                                data-contract-id=""
                                                class="hidden inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            Download PDF
                                        </button>
                                    </div>
                                </div>
                                ` : ''}

                                <!-- Contract Details -->
                                ${summary.contractDetails ? `
                                <div>
                                    <h4 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                        </svg>
                                        Contract Details
                                    </h4>
                                    <div class="bg-white border border-gray-200 rounded-lg p-6">
                                        <p class="text-base text-gray-900">${summary.contractDetails}</p>
                                    </div>
                                </div>
                                ` : ''}
                            </div>`;
                        document.getElementById('orderDetailsContent').innerHTML = content;
                    } else {
                        document.getElementById('orderDetailsContent').innerHTML = `
                            <div class="text-center py-8">
                                <svg class="mx-auto h-12 w-12 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <p class="text-red-600 font-medium">Error: ${response.message}</p>
                            </div>
                        `;
                    }
                },
                error: function(xhr, status, error) {
                    document.getElementById('orderDetailsContent').innerHTML = `
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <p class="text-red-600 font-medium">Error loading order details: ${error}</p>
                        </div>
                    `;
                }
            });
        }

        function closeOrderDetailsModal() {
            document.getElementById('orderDetailsModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('orderDetailsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeOrderDetailsModal();
            }
        });

        function showSuccessModal(message) {
            document.getElementById('successMessage').textContent = message;
            document.getElementById('successModal').classList.remove('hidden');
        }

        function closeSuccessModal() {
            document.getElementById('successModal').classList.add('hidden');
        }

        function generateContract(orderId) {
            // Show loading state
            const button = event.target;
            const originalText = button.textContent;
            button.textContent = 'Generating...';
            button.disabled = true;

            $.ajax({
                url: '@Url.Action("GenerateContract", "Order")',
                type: 'POST',
                data: { orderId: orderId },
                success: function(response) {
                    console.log("Server response from GenerateContract for OrderSummaryID " + orderId + ":", response);

                    if (response.success && response.generatedContractId) {
                        const actualGeneratedContractId = response.generatedContractId;
                        const generateButton = $(`#generateBtn_${orderId}`);
                        const downloadButton = $(`#downloadBtn_${orderId}`);

                        console.log(`Storing actualGeneratedContractId: ${actualGeneratedContractId} on downloadBtn_${orderId}`);

                        generateButton.addClass('hidden');
                        downloadButton.attr('data-contract-id', actualGeneratedContractId);
                        downloadButton.removeClass('hidden');
                        showSuccessModal('Contract generated successfully! You can now download the PDF.');
                    } else {
                        let errorMessage = 'Error generating contract.';
                        if (response.message) {
                            errorMessage = 'Error: ' + response.message;
                        } else if (response.success && !response.generatedContractId) {
                            errorMessage = 'Error: Contract generated, but its new ID was not returned by the server. (response.generatedContractId is missing)';
                        }
                        console.error("GenerateContract error or missing generatedContractId. Response:", response);
                        showSuccessModal(errorMessage);
                    }
                },
                error: function(xhr, status, error) {
                    showSuccessModal('Error generating contract: ' + error);
                },
                complete: function() {
                    button.textContent = originalText;   
                    button.disabled = false;
                }
            });
        }

        function downloadContract(orderIdFromClick) {
            console.log(`downloadContract called with orderIdFromClick (OrderSummaryID): ${orderIdFromClick}`);

            const apiBaseUrl = '@ViewData["ApiBaseUrl"]';
            let fullApiUrl = apiBaseUrl;
            if (!fullApiUrl.endsWith('/')) {
                fullApiUrl += '/';
            }

            const downloadButton = $(`#downloadBtn_${orderIdFromClick}`);
            const storedGeneratedContractId = downloadButton.attr('data-contract-id');
            console.log(`Value of data-contract-id from #downloadBtn_${orderIdFromClick}: '${storedGeneratedContractId}'`);

            let contractIdToUse;
            if (storedGeneratedContractId && storedGeneratedContractId.trim() !== "") {
                contractIdToUse = storedGeneratedContractId;
                console.log(`Using NEWLY GENERATED contractId from data-contract-id for download: ${contractIdToUse}`);
            } else {
                contractIdToUse = orderIdFromClick;
                console.warn(`data-contract-id was not set or empty on #downloadBtn_${orderIdFromClick}. Falling back to orderIdFromClick (OrderSummaryID): ${contractIdToUse}. This may not be the correct ContractID if generation happened.`);
            }
            
            if (!contractIdToUse) {
                const errorMsg = "Error: Contract ID is not available for download. Cannot determine ID to use.";
                showSuccessModal(errorMsg);
                console.error("downloadContract: contractIdToUse is undefined or empty.", { orderIdFromClick, attrVal: storedGeneratedContractId });
                return;
            }

            console.log(`Final contractIdToUse for API call: ${contractIdToUse}`);
            fullApiUrl += `api/contracts/${contractIdToUse}/download-pdf`;

            const link = document.createElement('a');
            link.href = fullApiUrl;
            link.download = `contract_${contractIdToUse}.pdf`;
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        // Close modal with ESC key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !document.getElementById('orderDetailsModal').classList.contains('hidden')) {
                closeOrderDetailsModal();
            }
        });
    </script>
} 